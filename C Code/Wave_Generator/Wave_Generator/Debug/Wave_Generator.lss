
Wave_Generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000150e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000150e  00001582  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002ebc  00000000  00000000  00001584  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a21  00000000  00000000  00004440  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004e68  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015d2  00000000  00000000  00004fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000615  00000000  00000000  0000657a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000af6  00000000  00000000  00006b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000388  00000000  00000000  00007688  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000709  00000000  00000000  00007a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001306  00000000  00000000  00008119  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000941f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      54:	05 a8       	sts	0x85, r16
      56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
      58:	b2 d4       	rcall	.+2404   	; 0x9be <StaircaseWave+0x2e>
      5a:	4e b9       	out	0x0e, r20	; 14
      5c:	38 36       	cpi	r19, 0x68	; 104
      5e:	a9 02       	muls	r26, r25
      60:	0c 50       	subi	r16, 0x0C	; 12
      62:	b9 91       	ld	r27, Y+
      64:	86 88       	ldd	r8, Z+22	; 0x16
      66:	08 3c       	cpi	r16, 0xC8	; 200
      68:	a6 aa       	sts	0x96, r26
      6a:	aa 2a       	or	r10, r26
      6c:	be 00       	.word	0x00be	; ????
      6e:	00 00       	nop
      70:	80 3f       	cpi	r24, 0xF0	; 240

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	10 e0       	ldi	r17, 0x00	; 0
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	ee e0       	ldi	r30, 0x0E	; 14
      86:	f5 e1       	ldi	r31, 0x15	; 21
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	a2 36       	cpi	r26, 0x62	; 98
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	10 e0       	ldi	r17, 0x00	; 0
      96:	a2 e6       	ldi	r26, 0x62	; 98
      98:	b0 e0       	ldi	r27, 0x00	; 0
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a2 36       	cpi	r26, 0x62	; 98
      a0:	b1 07       	cpc	r27, r17
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <main>
      a8:	0c 94 85 0a 	jmp	0x150a	; 0x150a <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupNumber,u8 Copy_u8PinNumber,u8 Copy_u8PinDirection)
{
	ES_t Local_enuErrorState = ES_NOK;

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A) && (Copy_u8PinNumber >= DIO_PIN_0 && Copy_u8PinNumber <= DIO_PIN_7) && (Copy_u8PinDirection == DIO_INPUT || Copy_u8PinDirection == DIO_OUTPUT))
      b0:	84 30       	cpi	r24, 0x04	; 4
      b2:	08 f0       	brcs	.+2      	; 0xb6 <DIO_enuSetPinDirection+0x6>
      b4:	77 c0       	rjmp	.+238    	; 0x1a4 <DIO_enuSetPinDirection+0xf4>
      b6:	68 30       	cpi	r22, 0x08	; 8
      b8:	08 f0       	brcs	.+2      	; 0xbc <DIO_enuSetPinDirection+0xc>
      ba:	76 c0       	rjmp	.+236    	; 0x1a8 <DIO_enuSetPinDirection+0xf8>
      bc:	42 30       	cpi	r20, 0x02	; 2
      be:	08 f0       	brcs	.+2      	; 0xc2 <DIO_enuSetPinDirection+0x12>
      c0:	75 c0       	rjmp	.+234    	; 0x1ac <DIO_enuSetPinDirection+0xfc>
	{
		switch(Copy_u8GroupNumber)
      c2:	81 30       	cpi	r24, 0x01	; 1
      c4:	11 f1       	breq	.+68     	; 0x10a <DIO_enuSetPinDirection+0x5a>
      c6:	81 30       	cpi	r24, 0x01	; 1
      c8:	30 f0       	brcs	.+12     	; 0xd6 <DIO_enuSetPinDirection+0x26>
      ca:	82 30       	cpi	r24, 0x02	; 2
      cc:	c1 f1       	breq	.+112    	; 0x13e <DIO_enuSetPinDirection+0x8e>
      ce:	83 30       	cpi	r24, 0x03	; 3
      d0:	09 f0       	breq	.+2      	; 0xd4 <DIO_enuSetPinDirection+0x24>
      d2:	6e c0       	rjmp	.+220    	; 0x1b0 <DIO_enuSetPinDirection+0x100>
      d4:	4e c0       	rjmp	.+156    	; 0x172 <DIO_enuSetPinDirection+0xc2>
		{
		case DIO_GROUP_A:
			DDRA &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
      d6:	2a b3       	in	r18, 0x1a	; 26
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	06 2e       	mov	r0, r22
      de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_enuSetPinDirection+0x34>
      e0:	88 0f       	add	r24, r24
      e2:	99 1f       	adc	r25, r25
      e4:	0a 94       	dec	r0
      e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_enuSetPinDirection+0x30>
      e8:	80 95       	com	r24
      ea:	82 23       	and	r24, r18
      ec:	8a bb       	out	0x1a, r24	; 26
			DDRA |= (Copy_u8PinDirection << Copy_u8PinNumber );
      ee:	2a b3       	in	r18, 0x1a	; 26
      f0:	84 2f       	mov	r24, r20
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	ac 01       	movw	r20, r24
      f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_enuSetPinDirection+0x4c>
      f8:	44 0f       	add	r20, r20
      fa:	55 1f       	adc	r21, r21
      fc:	6a 95       	dec	r22
      fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_enuSetPinDirection+0x48>
     100:	ba 01       	movw	r22, r20
     102:	62 2b       	or	r22, r18
     104:	6a bb       	out	0x1a, r22	; 26
		case DIO_GROUP_D:
			DDRD &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
			DDRD |= (Copy_u8PinDirection << Copy_u8PinNumber );
			break;
		}
		Local_enuErrorState = ES_OK;
     106:	81 e0       	ldi	r24, 0x01	; 1
		switch(Copy_u8GroupNumber)
		{
		case DIO_GROUP_A:
			DDRA &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
			DDRA |= (Copy_u8PinDirection << Copy_u8PinNumber );
			break;
     108:	08 95       	ret
		case DIO_GROUP_B:
			DDRB &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
     10a:	87 b3       	in	r24, 0x17	; 23
     10c:	e1 e0       	ldi	r30, 0x01	; 1
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	06 2e       	mov	r0, r22
     112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_enuSetPinDirection+0x68>
     114:	ee 0f       	add	r30, r30
     116:	ff 1f       	adc	r31, r31
     118:	0a 94       	dec	r0
     11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_enuSetPinDirection+0x64>
     11c:	e0 95       	com	r30
     11e:	e8 23       	and	r30, r24
     120:	e7 bb       	out	0x17, r30	; 23
			DDRB |= (Copy_u8PinDirection << Copy_u8PinNumber );
     122:	27 b3       	in	r18, 0x17	; 23
     124:	84 2f       	mov	r24, r20
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	ac 01       	movw	r20, r24
     12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_enuSetPinDirection+0x80>
     12c:	44 0f       	add	r20, r20
     12e:	55 1f       	adc	r21, r21
     130:	6a 95       	dec	r22
     132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_enuSetPinDirection+0x7c>
     134:	ba 01       	movw	r22, r20
     136:	62 2b       	or	r22, r18
     138:	67 bb       	out	0x17, r22	; 23
		case DIO_GROUP_D:
			DDRD &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
			DDRD |= (Copy_u8PinDirection << Copy_u8PinNumber );
			break;
		}
		Local_enuErrorState = ES_OK;
     13a:	81 e0       	ldi	r24, 0x01	; 1
			DDRA |= (Copy_u8PinDirection << Copy_u8PinNumber );
			break;
		case DIO_GROUP_B:
			DDRB &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
			DDRB |= (Copy_u8PinDirection << Copy_u8PinNumber );
			break;
     13c:	08 95       	ret
		case DIO_GROUP_C:
			DDRC &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
     13e:	84 b3       	in	r24, 0x14	; 20
     140:	e1 e0       	ldi	r30, 0x01	; 1
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	06 2e       	mov	r0, r22
     146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_enuSetPinDirection+0x9c>
     148:	ee 0f       	add	r30, r30
     14a:	ff 1f       	adc	r31, r31
     14c:	0a 94       	dec	r0
     14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_enuSetPinDirection+0x98>
     150:	e0 95       	com	r30
     152:	e8 23       	and	r30, r24
     154:	e4 bb       	out	0x14, r30	; 20
			DDRC |= (Copy_u8PinDirection << Copy_u8PinNumber );
     156:	24 b3       	in	r18, 0x14	; 20
     158:	84 2f       	mov	r24, r20
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	ac 01       	movw	r20, r24
     15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_enuSetPinDirection+0xb4>
     160:	44 0f       	add	r20, r20
     162:	55 1f       	adc	r21, r21
     164:	6a 95       	dec	r22
     166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_enuSetPinDirection+0xb0>
     168:	ba 01       	movw	r22, r20
     16a:	62 2b       	or	r22, r18
     16c:	64 bb       	out	0x14, r22	; 20
		case DIO_GROUP_D:
			DDRD &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
			DDRD |= (Copy_u8PinDirection << Copy_u8PinNumber );
			break;
		}
		Local_enuErrorState = ES_OK;
     16e:	81 e0       	ldi	r24, 0x01	; 1
			DDRB |= (Copy_u8PinDirection << Copy_u8PinNumber );
			break;
		case DIO_GROUP_C:
			DDRC &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
			DDRC |= (Copy_u8PinDirection << Copy_u8PinNumber );
			break;
     170:	08 95       	ret
		case DIO_GROUP_D:
			DDRD &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
     172:	21 b3       	in	r18, 0x11	; 17
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	06 2e       	mov	r0, r22
     17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_enuSetPinDirection+0xd0>
     17c:	88 0f       	add	r24, r24
     17e:	99 1f       	adc	r25, r25
     180:	0a 94       	dec	r0
     182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_enuSetPinDirection+0xcc>
     184:	80 95       	com	r24
     186:	82 23       	and	r24, r18
     188:	81 bb       	out	0x11, r24	; 17
			DDRD |= (Copy_u8PinDirection << Copy_u8PinNumber );
     18a:	51 b3       	in	r21, 0x11	; 17
     18c:	24 2f       	mov	r18, r20
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	c9 01       	movw	r24, r18
     192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_enuSetPinDirection+0xe8>
     194:	88 0f       	add	r24, r24
     196:	99 1f       	adc	r25, r25
     198:	6a 95       	dec	r22
     19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_enuSetPinDirection+0xe4>
     19c:	85 2b       	or	r24, r21
     19e:	81 bb       	out	0x11, r24	; 17
			break;
		}
		Local_enuErrorState = ES_OK;
     1a0:	81 e0       	ldi	r24, 0x01	; 1
			DDRC |= (Copy_u8PinDirection << Copy_u8PinNumber );
			break;
		case DIO_GROUP_D:
			DDRD &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
			DDRD |= (Copy_u8PinDirection << Copy_u8PinNumber );
			break;
     1a2:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
     1a4:	82 e0       	ldi	r24, 0x02	; 2
     1a6:	08 95       	ret
     1a8:	82 e0       	ldi	r24, 0x02	; 2
     1aa:	08 95       	ret
     1ac:	82 e0       	ldi	r24, 0x02	; 2
     1ae:	08 95       	ret
		case DIO_GROUP_D:
			DDRD &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
			DDRD |= (Copy_u8PinDirection << Copy_u8PinNumber );
			break;
		}
		Local_enuErrorState = ES_OK;
     1b0:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_enuErrorState = OUT_OF_RANGE;
	}

	return Local_enuErrorState;
}
     1b2:	08 95       	ret

000001b4 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupNumber,u8 Copy_u8PinNumber,u8 Copy_u8PinValue)
{
	ES_t Local_enuErrorState = ES_NOK;

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A) && (Copy_u8PinNumber >= DIO_PIN_0 && Copy_u8PinNumber <= DIO_PIN_7) && (Copy_u8PinValue == DIO_LOW_LEVEL || Copy_u8PinValue == DIO_HIGH_LEVEL))
     1b4:	84 30       	cpi	r24, 0x04	; 4
     1b6:	08 f0       	brcs	.+2      	; 0x1ba <DIO_enuSetPinValue+0x6>
     1b8:	77 c0       	rjmp	.+238    	; 0x2a8 <DIO_enuSetPinValue+0xf4>
     1ba:	68 30       	cpi	r22, 0x08	; 8
     1bc:	08 f0       	brcs	.+2      	; 0x1c0 <DIO_enuSetPinValue+0xc>
     1be:	76 c0       	rjmp	.+236    	; 0x2ac <DIO_enuSetPinValue+0xf8>
     1c0:	42 30       	cpi	r20, 0x02	; 2
     1c2:	08 f0       	brcs	.+2      	; 0x1c6 <DIO_enuSetPinValue+0x12>
     1c4:	75 c0       	rjmp	.+234    	; 0x2b0 <DIO_enuSetPinValue+0xfc>
	{
		switch(Copy_u8GroupNumber)
     1c6:	81 30       	cpi	r24, 0x01	; 1
     1c8:	11 f1       	breq	.+68     	; 0x20e <DIO_enuSetPinValue+0x5a>
     1ca:	81 30       	cpi	r24, 0x01	; 1
     1cc:	30 f0       	brcs	.+12     	; 0x1da <DIO_enuSetPinValue+0x26>
     1ce:	82 30       	cpi	r24, 0x02	; 2
     1d0:	c1 f1       	breq	.+112    	; 0x242 <DIO_enuSetPinValue+0x8e>
     1d2:	83 30       	cpi	r24, 0x03	; 3
     1d4:	09 f0       	breq	.+2      	; 0x1d8 <DIO_enuSetPinValue+0x24>
     1d6:	6e c0       	rjmp	.+220    	; 0x2b4 <DIO_enuSetPinValue+0x100>
     1d8:	4e c0       	rjmp	.+156    	; 0x276 <DIO_enuSetPinValue+0xc2>
		{
		case DIO_GROUP_A:
			PORTA &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
     1da:	2b b3       	in	r18, 0x1b	; 27
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	06 2e       	mov	r0, r22
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_enuSetPinValue+0x34>
     1e4:	88 0f       	add	r24, r24
     1e6:	99 1f       	adc	r25, r25
     1e8:	0a 94       	dec	r0
     1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_enuSetPinValue+0x30>
     1ec:	80 95       	com	r24
     1ee:	82 23       	and	r24, r18
     1f0:	8b bb       	out	0x1b, r24	; 27
			PORTA |= (Copy_u8PinValue << Copy_u8PinNumber );
     1f2:	2b b3       	in	r18, 0x1b	; 27
     1f4:	84 2f       	mov	r24, r20
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	ac 01       	movw	r20, r24
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_enuSetPinValue+0x4c>
     1fc:	44 0f       	add	r20, r20
     1fe:	55 1f       	adc	r21, r21
     200:	6a 95       	dec	r22
     202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_enuSetPinValue+0x48>
     204:	ba 01       	movw	r22, r20
     206:	62 2b       	or	r22, r18
     208:	6b bb       	out	0x1b, r22	; 27
		case DIO_GROUP_D:
			PORTD &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
			PORTD |= (Copy_u8PinValue << Copy_u8PinNumber );
			break;
		}
		Local_enuErrorState = ES_OK;
     20a:	81 e0       	ldi	r24, 0x01	; 1
		switch(Copy_u8GroupNumber)
		{
		case DIO_GROUP_A:
			PORTA &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
			PORTA |= (Copy_u8PinValue << Copy_u8PinNumber );
			break;
     20c:	08 95       	ret
		case DIO_GROUP_B:
			PORTB &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
     20e:	88 b3       	in	r24, 0x18	; 24
     210:	e1 e0       	ldi	r30, 0x01	; 1
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	06 2e       	mov	r0, r22
     216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_enuSetPinValue+0x68>
     218:	ee 0f       	add	r30, r30
     21a:	ff 1f       	adc	r31, r31
     21c:	0a 94       	dec	r0
     21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_enuSetPinValue+0x64>
     220:	e0 95       	com	r30
     222:	e8 23       	and	r30, r24
     224:	e8 bb       	out	0x18, r30	; 24
			PORTB |= (Copy_u8PinValue << Copy_u8PinNumber );
     226:	28 b3       	in	r18, 0x18	; 24
     228:	84 2f       	mov	r24, r20
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	ac 01       	movw	r20, r24
     22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_enuSetPinValue+0x80>
     230:	44 0f       	add	r20, r20
     232:	55 1f       	adc	r21, r21
     234:	6a 95       	dec	r22
     236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_enuSetPinValue+0x7c>
     238:	ba 01       	movw	r22, r20
     23a:	62 2b       	or	r22, r18
     23c:	68 bb       	out	0x18, r22	; 24
		case DIO_GROUP_D:
			PORTD &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
			PORTD |= (Copy_u8PinValue << Copy_u8PinNumber );
			break;
		}
		Local_enuErrorState = ES_OK;
     23e:	81 e0       	ldi	r24, 0x01	; 1
			PORTA |= (Copy_u8PinValue << Copy_u8PinNumber );
			break;
		case DIO_GROUP_B:
			PORTB &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
			PORTB |= (Copy_u8PinValue << Copy_u8PinNumber );
			break;
     240:	08 95       	ret
		case DIO_GROUP_C:
			PORTC &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
     242:	85 b3       	in	r24, 0x15	; 21
     244:	e1 e0       	ldi	r30, 0x01	; 1
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	06 2e       	mov	r0, r22
     24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_enuSetPinValue+0x9c>
     24c:	ee 0f       	add	r30, r30
     24e:	ff 1f       	adc	r31, r31
     250:	0a 94       	dec	r0
     252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_enuSetPinValue+0x98>
     254:	e0 95       	com	r30
     256:	e8 23       	and	r30, r24
     258:	e5 bb       	out	0x15, r30	; 21
			PORTC |= (Copy_u8PinValue << Copy_u8PinNumber );
     25a:	25 b3       	in	r18, 0x15	; 21
     25c:	84 2f       	mov	r24, r20
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	ac 01       	movw	r20, r24
     262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_enuSetPinValue+0xb4>
     264:	44 0f       	add	r20, r20
     266:	55 1f       	adc	r21, r21
     268:	6a 95       	dec	r22
     26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_enuSetPinValue+0xb0>
     26c:	ba 01       	movw	r22, r20
     26e:	62 2b       	or	r22, r18
     270:	65 bb       	out	0x15, r22	; 21
		case DIO_GROUP_D:
			PORTD &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
			PORTD |= (Copy_u8PinValue << Copy_u8PinNumber );
			break;
		}
		Local_enuErrorState = ES_OK;
     272:	81 e0       	ldi	r24, 0x01	; 1
			PORTB |= (Copy_u8PinValue << Copy_u8PinNumber );
			break;
		case DIO_GROUP_C:
			PORTC &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
			PORTC |= (Copy_u8PinValue << Copy_u8PinNumber );
			break;
     274:	08 95       	ret
		case DIO_GROUP_D:
			PORTD &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
     276:	22 b3       	in	r18, 0x12	; 18
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	06 2e       	mov	r0, r22
     27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_enuSetPinValue+0xd0>
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	0a 94       	dec	r0
     286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_enuSetPinValue+0xcc>
     288:	80 95       	com	r24
     28a:	82 23       	and	r24, r18
     28c:	82 bb       	out	0x12, r24	; 18
			PORTD |= (Copy_u8PinValue << Copy_u8PinNumber );
     28e:	52 b3       	in	r21, 0x12	; 18
     290:	24 2f       	mov	r18, r20
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	c9 01       	movw	r24, r18
     296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_enuSetPinValue+0xe8>
     298:	88 0f       	add	r24, r24
     29a:	99 1f       	adc	r25, r25
     29c:	6a 95       	dec	r22
     29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_enuSetPinValue+0xe4>
     2a0:	85 2b       	or	r24, r21
     2a2:	82 bb       	out	0x12, r24	; 18
			break;
		}
		Local_enuErrorState = ES_OK;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
			PORTC |= (Copy_u8PinValue << Copy_u8PinNumber );
			break;
		case DIO_GROUP_D:
			PORTD &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
			PORTD |= (Copy_u8PinValue << Copy_u8PinNumber );
			break;
     2a6:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
     2a8:	82 e0       	ldi	r24, 0x02	; 2
     2aa:	08 95       	ret
     2ac:	82 e0       	ldi	r24, 0x02	; 2
     2ae:	08 95       	ret
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	08 95       	ret
		case DIO_GROUP_D:
			PORTD &= ~(DIO_BIT_MASK << Copy_u8PinNumber );
			PORTD |= (Copy_u8PinValue << Copy_u8PinNumber );
			break;
		}
		Local_enuErrorState = ES_OK;
     2b4:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_enuErrorState = OUT_OF_RANGE;
	}

	return Local_enuErrorState;
}
     2b6:	08 95       	ret

000002b8 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8GroupNumber,u8 Copy_u8PortDirection)
{
	ES_t Local_enuErrorState = ES_NOK;

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A) && (Copy_u8PortDirection >= DIO_SMALLEST_PORT_DIRECTION && Copy_u8PortDirection <= DIO_LARGEST_PORT_DIRECTION))
     2b8:	84 30       	cpi	r24, 0x04	; 4
     2ba:	a8 f4       	brcc	.+42     	; 0x2e6 <DIO_enuSetPortDirection+0x2e>
	{
		switch(Copy_u8GroupNumber)
     2bc:	81 30       	cpi	r24, 0x01	; 1
     2be:	51 f0       	breq	.+20     	; 0x2d4 <DIO_enuSetPortDirection+0x1c>
     2c0:	81 30       	cpi	r24, 0x01	; 1
     2c2:	28 f0       	brcs	.+10     	; 0x2ce <DIO_enuSetPortDirection+0x16>
     2c4:	82 30       	cpi	r24, 0x02	; 2
     2c6:	49 f0       	breq	.+18     	; 0x2da <DIO_enuSetPortDirection+0x22>
     2c8:	83 30       	cpi	r24, 0x03	; 3
     2ca:	79 f4       	brne	.+30     	; 0x2ea <DIO_enuSetPortDirection+0x32>
     2cc:	09 c0       	rjmp	.+18     	; 0x2e0 <DIO_enuSetPortDirection+0x28>
		{
		case DIO_GROUP_A:
			DDRA = Copy_u8PortDirection;
     2ce:	6a bb       	out	0x1a, r22	; 26
			break;
		case DIO_GROUP_D:
			DDRD = Copy_u8PortDirection;
			break;
		}
		Local_enuErrorState = ES_OK;
     2d0:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(Copy_u8GroupNumber)
		{
		case DIO_GROUP_A:
			DDRA = Copy_u8PortDirection;
			break;
     2d2:	08 95       	ret
		case DIO_GROUP_B:
			DDRB = Copy_u8PortDirection;
     2d4:	67 bb       	out	0x17, r22	; 23
			break;
		case DIO_GROUP_D:
			DDRD = Copy_u8PortDirection;
			break;
		}
		Local_enuErrorState = ES_OK;
     2d6:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_GROUP_A:
			DDRA = Copy_u8PortDirection;
			break;
		case DIO_GROUP_B:
			DDRB = Copy_u8PortDirection;
			break;
     2d8:	08 95       	ret
		case DIO_GROUP_C:
			DDRC = Copy_u8PortDirection;
     2da:	64 bb       	out	0x14, r22	; 20
			break;
		case DIO_GROUP_D:
			DDRD = Copy_u8PortDirection;
			break;
		}
		Local_enuErrorState = ES_OK;
     2dc:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_GROUP_B:
			DDRB = Copy_u8PortDirection;
			break;
		case DIO_GROUP_C:
			DDRC = Copy_u8PortDirection;
			break;
     2de:	08 95       	ret
		case DIO_GROUP_D:
			DDRD = Copy_u8PortDirection;
     2e0:	61 bb       	out	0x11, r22	; 17
			break;
		}
		Local_enuErrorState = ES_OK;
     2e2:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_GROUP_C:
			DDRC = Copy_u8PortDirection;
			break;
		case DIO_GROUP_D:
			DDRD = Copy_u8PortDirection;
			break;
     2e4:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
     2e6:	82 e0       	ldi	r24, 0x02	; 2
     2e8:	08 95       	ret
			break;
		case DIO_GROUP_D:
			DDRD = Copy_u8PortDirection;
			break;
		}
		Local_enuErrorState = ES_OK;
     2ea:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_enuErrorState = OUT_OF_RANGE;
	}

	return Local_enuErrorState;
}
     2ec:	08 95       	ret

000002ee <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8GroupNumber,u8 Copy_u8PortValue)
{
	ES_t Local_enuErrorState = ES_NOK;

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A) && (Copy_u8PortValue >= DIO_SMALLEST_PORT_VALUE && Copy_u8PortValue <= DIO_LARGEST_PORT_VALUE))
     2ee:	84 30       	cpi	r24, 0x04	; 4
     2f0:	a8 f4       	brcc	.+42     	; 0x31c <DIO_enuSetPortValue+0x2e>
	{
		switch(Copy_u8GroupNumber)
     2f2:	81 30       	cpi	r24, 0x01	; 1
     2f4:	51 f0       	breq	.+20     	; 0x30a <DIO_enuSetPortValue+0x1c>
     2f6:	81 30       	cpi	r24, 0x01	; 1
     2f8:	28 f0       	brcs	.+10     	; 0x304 <DIO_enuSetPortValue+0x16>
     2fa:	82 30       	cpi	r24, 0x02	; 2
     2fc:	49 f0       	breq	.+18     	; 0x310 <DIO_enuSetPortValue+0x22>
     2fe:	83 30       	cpi	r24, 0x03	; 3
     300:	79 f4       	brne	.+30     	; 0x320 <DIO_enuSetPortValue+0x32>
     302:	09 c0       	rjmp	.+18     	; 0x316 <DIO_enuSetPortValue+0x28>
		{
		case DIO_GROUP_A:
			PORTA = Copy_u8PortValue;
     304:	6b bb       	out	0x1b, r22	; 27
			break;
		case DIO_GROUP_D:
			PORTD = Copy_u8PortValue;
			break;
		}
		Local_enuErrorState = ES_OK;
     306:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(Copy_u8GroupNumber)
		{
		case DIO_GROUP_A:
			PORTA = Copy_u8PortValue;
			break;
     308:	08 95       	ret
		case DIO_GROUP_B:
			PORTB = Copy_u8PortValue;
     30a:	68 bb       	out	0x18, r22	; 24
			break;
		case DIO_GROUP_D:
			PORTD = Copy_u8PortValue;
			break;
		}
		Local_enuErrorState = ES_OK;
     30c:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_GROUP_A:
			PORTA = Copy_u8PortValue;
			break;
		case DIO_GROUP_B:
			PORTB = Copy_u8PortValue;
			break;
     30e:	08 95       	ret
		case DIO_GROUP_C:
			PORTC = Copy_u8PortValue;
     310:	65 bb       	out	0x15, r22	; 21
			break;
		case DIO_GROUP_D:
			PORTD = Copy_u8PortValue;
			break;
		}
		Local_enuErrorState = ES_OK;
     312:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_GROUP_B:
			PORTB = Copy_u8PortValue;
			break;
		case DIO_GROUP_C:
			PORTC = Copy_u8PortValue;
			break;
     314:	08 95       	ret
		case DIO_GROUP_D:
			PORTD = Copy_u8PortValue;
     316:	62 bb       	out	0x12, r22	; 18
			break;
		}
		Local_enuErrorState = ES_OK;
     318:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_GROUP_C:
			PORTC = Copy_u8PortValue;
			break;
		case DIO_GROUP_D:
			PORTD = Copy_u8PortValue;
			break;
     31a:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
     31c:	82 e0       	ldi	r24, 0x02	; 2
     31e:	08 95       	ret
			break;
		case DIO_GROUP_D:
			PORTD = Copy_u8PortValue;
			break;
		}
		Local_enuErrorState = ES_OK;
     320:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_enuErrorState = OUT_OF_RANGE;
	}

	return Local_enuErrorState;
}
     322:	08 95       	ret

00000324 <DIO_enuTogglePinValue>:

ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupNumber,u8 Copy_u8PinNumber)
{
	ES_t Local_enuErrorState = ES_NOK;

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A) && (Copy_u8PinNumber >= DIO_PIN_0 && Copy_u8PinNumber <= DIO_PIN_7))
     324:	84 30       	cpi	r24, 0x04	; 4
     326:	08 f0       	brcs	.+2      	; 0x32a <DIO_enuTogglePinValue+0x6>
     328:	45 c0       	rjmp	.+138    	; 0x3b4 <DIO_enuTogglePinValue+0x90>
     32a:	68 30       	cpi	r22, 0x08	; 8
     32c:	08 f0       	brcs	.+2      	; 0x330 <DIO_enuTogglePinValue+0xc>
     32e:	44 c0       	rjmp	.+136    	; 0x3b8 <DIO_enuTogglePinValue+0x94>
	{
		switch(Copy_u8GroupNumber)
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	b1 f0       	breq	.+44     	; 0x360 <DIO_enuTogglePinValue+0x3c>
     334:	81 30       	cpi	r24, 0x01	; 1
     336:	30 f0       	brcs	.+12     	; 0x344 <DIO_enuTogglePinValue+0x20>
     338:	82 30       	cpi	r24, 0x02	; 2
     33a:	01 f1       	breq	.+64     	; 0x37c <DIO_enuTogglePinValue+0x58>
     33c:	83 30       	cpi	r24, 0x03	; 3
     33e:	09 f0       	breq	.+2      	; 0x342 <DIO_enuTogglePinValue+0x1e>
     340:	3d c0       	rjmp	.+122    	; 0x3bc <DIO_enuTogglePinValue+0x98>
     342:	2a c0       	rjmp	.+84     	; 0x398 <DIO_enuTogglePinValue+0x74>
		{
		case DIO_GROUP_A:
			PORTA ^= (DIO_BIT_MASK << Copy_u8PinNumber );
     344:	2b b3       	in	r18, 0x1b	; 27
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	ac 01       	movw	r20, r24
     34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_enuTogglePinValue+0x2e>
     34e:	44 0f       	add	r20, r20
     350:	55 1f       	adc	r21, r21
     352:	6a 95       	dec	r22
     354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_enuTogglePinValue+0x2a>
     356:	ba 01       	movw	r22, r20
     358:	62 27       	eor	r22, r18
     35a:	6b bb       	out	0x1b, r22	; 27
			break;
		case DIO_GROUP_D:
			PORTD ^= (DIO_BIT_MASK << Copy_u8PinNumber );
			break;
		}
		Local_enuErrorState = ES_OK;
     35c:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(Copy_u8GroupNumber)
		{
		case DIO_GROUP_A:
			PORTA ^= (DIO_BIT_MASK << Copy_u8PinNumber );
			break;
     35e:	08 95       	ret
		case DIO_GROUP_B:
			PORTB ^= (DIO_BIT_MASK << Copy_u8PinNumber );
     360:	28 b3       	in	r18, 0x18	; 24
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	ac 01       	movw	r20, r24
     368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_enuTogglePinValue+0x4a>
     36a:	44 0f       	add	r20, r20
     36c:	55 1f       	adc	r21, r21
     36e:	6a 95       	dec	r22
     370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_enuTogglePinValue+0x46>
     372:	ba 01       	movw	r22, r20
     374:	62 27       	eor	r22, r18
     376:	68 bb       	out	0x18, r22	; 24
			break;
		case DIO_GROUP_D:
			PORTD ^= (DIO_BIT_MASK << Copy_u8PinNumber );
			break;
		}
		Local_enuErrorState = ES_OK;
     378:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_GROUP_A:
			PORTA ^= (DIO_BIT_MASK << Copy_u8PinNumber );
			break;
		case DIO_GROUP_B:
			PORTB ^= (DIO_BIT_MASK << Copy_u8PinNumber );
			break;
     37a:	08 95       	ret
		case DIO_GROUP_C:
			PORTC ^= (DIO_BIT_MASK << Copy_u8PinNumber );
     37c:	25 b3       	in	r18, 0x15	; 21
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	ac 01       	movw	r20, r24
     384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_enuTogglePinValue+0x66>
     386:	44 0f       	add	r20, r20
     388:	55 1f       	adc	r21, r21
     38a:	6a 95       	dec	r22
     38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_enuTogglePinValue+0x62>
     38e:	ba 01       	movw	r22, r20
     390:	62 27       	eor	r22, r18
     392:	65 bb       	out	0x15, r22	; 21
			break;
		case DIO_GROUP_D:
			PORTD ^= (DIO_BIT_MASK << Copy_u8PinNumber );
			break;
		}
		Local_enuErrorState = ES_OK;
     394:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_GROUP_B:
			PORTB ^= (DIO_BIT_MASK << Copy_u8PinNumber );
			break;
		case DIO_GROUP_C:
			PORTC ^= (DIO_BIT_MASK << Copy_u8PinNumber );
			break;
     396:	08 95       	ret
		case DIO_GROUP_D:
			PORTD ^= (DIO_BIT_MASK << Copy_u8PinNumber );
     398:	22 b3       	in	r18, 0x12	; 18
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	ac 01       	movw	r20, r24
     3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_enuTogglePinValue+0x82>
     3a2:	44 0f       	add	r20, r20
     3a4:	55 1f       	adc	r21, r21
     3a6:	6a 95       	dec	r22
     3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_enuTogglePinValue+0x7e>
     3aa:	ba 01       	movw	r22, r20
     3ac:	62 27       	eor	r22, r18
     3ae:	62 bb       	out	0x12, r22	; 18
			break;
		}
		Local_enuErrorState = ES_OK;
     3b0:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_GROUP_C:
			PORTC ^= (DIO_BIT_MASK << Copy_u8PinNumber );
			break;
		case DIO_GROUP_D:
			PORTD ^= (DIO_BIT_MASK << Copy_u8PinNumber );
			break;
     3b2:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
     3b4:	82 e0       	ldi	r24, 0x02	; 2
     3b6:	08 95       	ret
     3b8:	82 e0       	ldi	r24, 0x02	; 2
     3ba:	08 95       	ret
			break;
		case DIO_GROUP_D:
			PORTD ^= (DIO_BIT_MASK << Copy_u8PinNumber );
			break;
		}
		Local_enuErrorState = ES_OK;
     3bc:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_enuErrorState = OUT_OF_RANGE;
	}

	return Local_enuErrorState;
}
     3be:	08 95       	ret

000003c0 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8GroupNumber,u8 Copy_u8PinNumber)
{
	u8 Local_u8PinValue = 0 ;

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A) && (Copy_u8PinNumber >= DIO_PIN_0 && Copy_u8PinNumber <= DIO_PIN_7))
     3c0:	84 30       	cpi	r24, 0x04	; 4
     3c2:	98 f5       	brcc	.+102    	; 0x42a <DIO_u8GetPinValue+0x6a>
     3c4:	68 30       	cpi	r22, 0x08	; 8
     3c6:	98 f5       	brcc	.+102    	; 0x42e <DIO_u8GetPinValue+0x6e>
	{
		switch(Copy_u8GroupNumber)
     3c8:	81 30       	cpi	r24, 0x01	; 1
     3ca:	89 f0       	breq	.+34     	; 0x3ee <DIO_u8GetPinValue+0x2e>
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	28 f0       	brcs	.+10     	; 0x3da <DIO_u8GetPinValue+0x1a>
     3d0:	82 30       	cpi	r24, 0x02	; 2
     3d2:	b9 f0       	breq	.+46     	; 0x402 <DIO_u8GetPinValue+0x42>
     3d4:	83 30       	cpi	r24, 0x03	; 3
     3d6:	69 f5       	brne	.+90     	; 0x432 <DIO_u8GetPinValue+0x72>
     3d8:	1e c0       	rjmp	.+60     	; 0x416 <DIO_u8GetPinValue+0x56>
		{
		case DIO_GROUP_A:
			Local_u8PinValue = (PINA >> Copy_u8PinNumber) & DIO_BIT_MASK;
     3da:	29 b3       	in	r18, 0x19	; 25
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	c9 01       	movw	r24, r18
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_u8GetPinValue+0x26>
     3e2:	95 95       	asr	r25
     3e4:	87 95       	ror	r24
     3e6:	6a 95       	dec	r22
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_u8GetPinValue+0x22>
     3ea:	81 70       	andi	r24, 0x01	; 1
			break;
     3ec:	08 95       	ret
		case DIO_GROUP_B:
			Local_u8PinValue = (PINB >> Copy_u8PinNumber) & DIO_BIT_MASK;
     3ee:	26 b3       	in	r18, 0x16	; 22
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	c9 01       	movw	r24, r18
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_u8GetPinValue+0x3a>
     3f6:	95 95       	asr	r25
     3f8:	87 95       	ror	r24
     3fa:	6a 95       	dec	r22
     3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_u8GetPinValue+0x36>
     3fe:	81 70       	andi	r24, 0x01	; 1
			break;
     400:	08 95       	ret
		case DIO_GROUP_C:
			Local_u8PinValue = (PINC >> Copy_u8PinNumber) & DIO_BIT_MASK;
     402:	23 b3       	in	r18, 0x13	; 19
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	c9 01       	movw	r24, r18
     408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_u8GetPinValue+0x4e>
     40a:	95 95       	asr	r25
     40c:	87 95       	ror	r24
     40e:	6a 95       	dec	r22
     410:	e2 f7       	brpl	.-8      	; 0x40a <DIO_u8GetPinValue+0x4a>
     412:	81 70       	andi	r24, 0x01	; 1
			break;
     414:	08 95       	ret
		case DIO_GROUP_D:
			Local_u8PinValue = (PIND >> Copy_u8PinNumber) & DIO_BIT_MASK;
     416:	20 b3       	in	r18, 0x10	; 16
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	c9 01       	movw	r24, r18
     41c:	02 c0       	rjmp	.+4      	; 0x422 <DIO_u8GetPinValue+0x62>
     41e:	95 95       	asr	r25
     420:	87 95       	ror	r24
     422:	6a 95       	dec	r22
     424:	e2 f7       	brpl	.-8      	; 0x41e <DIO_u8GetPinValue+0x5e>
     426:	81 70       	andi	r24, 0x01	; 1
			break;
     428:	08 95       	ret
		}
	}
	else
	{
		Local_u8PinValue = OUT_OF_RANGE;
     42a:	82 e0       	ldi	r24, 0x02	; 2
     42c:	08 95       	ret
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	08 95       	ret
	return Local_enuErrorState;
}

u8 DIO_u8GetPinValue(u8 Copy_u8GroupNumber,u8 Copy_u8PinNumber)
{
	u8 Local_u8PinValue = 0 ;
     432:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_u8PinValue = OUT_OF_RANGE;
	}

	return Local_u8PinValue;
}
     434:	08 95       	ret

00000436 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8GroupNumber)
{
	u8 Local_u8PORTValue = 0;

	if((Copy_u8GroupNumber <= DIO_GROUP_D && Copy_u8GroupNumber >= DIO_GROUP_A))
     436:	84 30       	cpi	r24, 0x04	; 4
     438:	88 f4       	brcc	.+34     	; 0x45c <DIO_u8GetPortValue+0x26>
	{
		switch(Copy_u8GroupNumber)
     43a:	81 30       	cpi	r24, 0x01	; 1
     43c:	49 f0       	breq	.+18     	; 0x450 <DIO_u8GetPortValue+0x1a>
     43e:	81 30       	cpi	r24, 0x01	; 1
     440:	28 f0       	brcs	.+10     	; 0x44c <DIO_u8GetPortValue+0x16>
     442:	82 30       	cpi	r24, 0x02	; 2
     444:	39 f0       	breq	.+14     	; 0x454 <DIO_u8GetPortValue+0x1e>
     446:	83 30       	cpi	r24, 0x03	; 3
     448:	59 f4       	brne	.+22     	; 0x460 <DIO_u8GetPortValue+0x2a>
     44a:	06 c0       	rjmp	.+12     	; 0x458 <DIO_u8GetPortValue+0x22>
		{
		case DIO_GROUP_A:
			Local_u8PORTValue = PINA;
     44c:	89 b3       	in	r24, 0x19	; 25
			break;
     44e:	08 95       	ret
		case DIO_GROUP_B:
			Local_u8PORTValue = PINB;
     450:	86 b3       	in	r24, 0x16	; 22
			break;
     452:	08 95       	ret
		case DIO_GROUP_C:
			Local_u8PORTValue = PINC;
     454:	83 b3       	in	r24, 0x13	; 19
			break;
     456:	08 95       	ret
		case DIO_GROUP_D:
			Local_u8PORTValue = PIND;
     458:	80 b3       	in	r24, 0x10	; 16
			break;
     45a:	08 95       	ret
		}
	}
	else
	{
		// change the value of out_of_range more than once as it may be equal to the value of PIN
		Local_u8PORTValue = OUT_OF_RANGE;
     45c:	82 e0       	ldi	r24, 0x02	; 2
     45e:	08 95       	ret
	return Local_u8PinValue;
}

u8 DIO_u8GetPortValue(u8 Copy_u8GroupNumber)
{
	u8 Local_u8PORTValue = 0;
     460:	80 e0       	ldi	r24, 0x00	; 0
		// change the value of out_of_range more than once as it may be equal to the value of PIN
		Local_u8PORTValue = OUT_OF_RANGE;
	}

	return Local_u8PORTValue;
}
     462:	08 95       	ret

00000464 <SendHalfDataPort>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_configuration.h"

static void SendHalfDataPort(u8 Copy_u8Data)
{
     464:	cf 92       	push	r12
     466:	df 92       	push	r13
     468:	ef 92       	push	r14
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	00 d0       	rcall	.+0      	; 0x476 <SendHalfDataPort+0x12>
     476:	00 d0       	rcall	.+0      	; 0x478 <SendHalfDataPort+0x14>
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_Au8DataPins[4]={LCD_DATA_PIN4,LCD_DATA_PIN5,LCD_DATA_PIN6,LCD_DATA_PIN7};
     47c:	94 e0       	ldi	r25, 0x04	; 4
     47e:	99 83       	std	Y+1, r25	; 0x01
     480:	95 e0       	ldi	r25, 0x05	; 5
     482:	9a 83       	std	Y+2, r25	; 0x02
     484:	96 e0       	ldi	r25, 0x06	; 6
     486:	9b 83       	std	Y+3, r25	; 0x03
     488:	97 e0       	ldi	r25, 0x07	; 7
     48a:	9c 83       	std	Y+4, r25	; 0x04
     48c:	7e 01       	movw	r14, r28
     48e:	08 94       	sec
     490:	e1 1c       	adc	r14, r1
     492:	f1 1c       	adc	r15, r1
     494:	00 e0       	ldi	r16, 0x00	; 0
     496:	10 e0       	ldi	r17, 0x00	; 0
	u8 Local_u8Iterator ;

	for(Local_u8Iterator = 0 ; Local_u8Iterator < 4 ;Local_u8Iterator++ )
	{
		DIO_enuSetPinValue(LCD_DATA_GRP , Local_Au8DataPins[Local_u8Iterator],(Copy_u8Data >> Local_u8Iterator) & 1);
     498:	c8 2e       	mov	r12, r24
     49a:	dd 24       	eor	r13, r13
     49c:	f7 01       	movw	r30, r14
     49e:	61 91       	ld	r22, Z+
     4a0:	7f 01       	movw	r14, r30
     4a2:	a6 01       	movw	r20, r12
     4a4:	00 2e       	mov	r0, r16
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <SendHalfDataPort+0x48>
     4a8:	55 95       	asr	r21
     4aa:	47 95       	ror	r20
     4ac:	0a 94       	dec	r0
     4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <SendHalfDataPort+0x44>
     4b0:	41 70       	andi	r20, 0x01	; 1
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_enuSetPinValue>
     4b8:	0f 5f       	subi	r16, 0xFF	; 255
     4ba:	1f 4f       	sbci	r17, 0xFF	; 255
static void SendHalfDataPort(u8 Copy_u8Data)
{
	u8 Local_Au8DataPins[4]={LCD_DATA_PIN4,LCD_DATA_PIN5,LCD_DATA_PIN6,LCD_DATA_PIN7};
	u8 Local_u8Iterator ;

	for(Local_u8Iterator = 0 ; Local_u8Iterator < 4 ;Local_u8Iterator++ )
     4bc:	04 30       	cpi	r16, 0x04	; 4
     4be:	11 05       	cpc	r17, r1
     4c0:	69 f7       	brne	.-38     	; 0x49c <SendHalfDataPort+0x38>
	{
		DIO_enuSetPinValue(LCD_DATA_GRP , Local_Au8DataPins[Local_u8Iterator],(Copy_u8Data >> Local_u8Iterator) & 1);
	}

}
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	ff 90       	pop	r15
     4d4:	ef 90       	pop	r14
     4d6:	df 90       	pop	r13
     4d8:	cf 90       	pop	r12
     4da:	08 95       	ret

000004dc <SendEnablePulse>:

static void SendEnablePulse()
{
	DIO_enuSetPinValue(LCD_EN_GRP,LCD_EN_PIN,DIO_HIGH_LEVEL);
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	63 e0       	ldi	r22, 0x03	; 3
     4e0:	41 e0       	ldi	r20, 0x01	; 1
     4e2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_enuSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e6:	83 ef       	ldi	r24, 0xF3	; 243
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <SendEnablePulse+0xe>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <SendEnablePulse+0x14>
     4f0:	00 00       	nop

	/* Wait */
	_delay_ms(2);

	DIO_enuSetPinValue(LCD_EN_GRP,LCD_EN_PIN,DIO_LOW_LEVEL);
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	63 e0       	ldi	r22, 0x03	; 3
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_enuSetPinValue>

}
     4fc:	08 95       	ret

000004fe <LCD_enuSetAllDirection>:
ES_t LCD_enuSetAllDirection()
{
	ES_t Local_enuErrorState = ES_OK;

	/* Control Direction */
	DIO_enuSetPinDirection(LCD_RS_GRP,LCD_RS_PIN,DIO_OUTPUT);
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	61 e0       	ldi	r22, 0x01	; 1
     502:	41 e0       	ldi	r20, 0x01	; 1
     504:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_RW_GRP,LCD_RW_PIN,DIO_OUTPUT);
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	62 e0       	ldi	r22, 0x02	; 2
     50c:	41 e0       	ldi	r20, 0x01	; 1
     50e:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_EN_GRP,LCD_EN_PIN,DIO_OUTPUT);
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	63 e0       	ldi	r22, 0x03	; 3
     516:	41 e0       	ldi	r20, 0x01	; 1
     518:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuSetPinDirection>
	/* Data Direction */
#if LCD_MODE == LCD_EIGHT_BIT
	DIO_enuSetPortDirection(LCD_DATA_GRP,0xff);

#elif LCD_MODE == LCD_FOUR_BIT
	DIO_enuSetPinDirection(LCD_DATA_GRP,LCD_DATA_PIN4,DIO_OUTPUT);
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	64 e0       	ldi	r22, 0x04	; 4
     520:	41 e0       	ldi	r20, 0x01	; 1
     522:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_DATA_GRP,LCD_DATA_PIN5,DIO_OUTPUT);
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	65 e0       	ldi	r22, 0x05	; 5
     52a:	41 e0       	ldi	r20, 0x01	; 1
     52c:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_DATA_GRP,LCD_DATA_PIN6,DIO_OUTPUT);
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	66 e0       	ldi	r22, 0x06	; 6
     534:	41 e0       	ldi	r20, 0x01	; 1
     536:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_DATA_GRP,LCD_DATA_PIN7,DIO_OUTPUT);
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	67 e0       	ldi	r22, 0x07	; 7
     53e:	41 e0       	ldi	r20, 0x01	; 1
     540:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_enuSetPinDirection>

#endif
	return Local_enuErrorState;
}
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	08 95       	ret

00000548 <LCD_enuWriteCommand>:

	return Local_enuErrorState;
}

ES_t LCD_enuWriteCommand(u8 Copy_u8Command)
{
     548:	cf 93       	push	r28
     54a:	c8 2f       	mov	r28, r24
	ES_t Local_enuErrorState = ES_OK;

	/* Set RS to zero for writing command */
	DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_LOW_LEVEL);
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	40 e0       	ldi	r20, 0x00	; 0
     552:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_enuSetPinValue>

	/* Set RW to zero for writing */
	DIO_enuSetPinValue(LCD_RW_GRP,LCD_RW_PIN,DIO_LOW_LEVEL);
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	62 e0       	ldi	r22, 0x02	; 2
     55a:	40 e0       	ldi	r20, 0x00	; 0
     55c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_enuSetPinValue>
	SendEnablePulse();

#elif LCD_MODE == LCD_FOUR_BIT

	/* Write higher command to data pins */
	SendHalfDataPort(Copy_u8Command >> 4);
     560:	8c 2f       	mov	r24, r28
     562:	82 95       	swap	r24
     564:	8f 70       	andi	r24, 0x0F	; 15
     566:	0e 94 32 02 	call	0x464	; 0x464 <SendHalfDataPort>

	/*Set enable pulse */
	SendEnablePulse();
     56a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SendEnablePulse>

	/* Write lower command to data pins */
	SendHalfDataPort(Copy_u8Command);
     56e:	8c 2f       	mov	r24, r28
     570:	0e 94 32 02 	call	0x464	; 0x464 <SendHalfDataPort>

	/*Set enable pulse */
	SendEnablePulse();
     574:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SendEnablePulse>


	return Local_enuErrorState;


}
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	cf 91       	pop	r28
     57c:	08 95       	ret

0000057e <LCD_enuClear>:

ES_t LCD_enuClear()
{
	ES_t Local_enuErrorState = ES_OK;

	LCD_enuWriteCommand(0b00000001);
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_enuWriteCommand>
     584:	83 ef       	ldi	r24, 0xF3	; 243
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	f1 f7       	brne	.-4      	; 0x588 <LCD_enuClear+0xa>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <LCD_enuClear+0x10>
     58e:	00 00       	nop

	/* Wait */
	_delay_ms(2);

	return Local_enuErrorState;
}
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	08 95       	ret

00000594 <LCD_enuInit>:

ES_t LCD_enuInit(void)
{
	ES_t Local_enuErrorState = ES_OK;

	LCD_enuSetAllDirection();
     594:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_enuSetAllDirection>
     598:	8f e0       	ldi	r24, 0x0F	; 15
     59a:	97 e2       	ldi	r25, 0x27	; 39
     59c:	01 97       	sbiw	r24, 0x01	; 1
     59e:	f1 f7       	brne	.-4      	; 0x59c <LCD_enuInit+0x8>
     5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <LCD_enuInit+0xe>
     5a2:	00 00       	nop
	LCD_enuWriteCommand(0b00111000);

#elif LCD_MODE == LCD_FOUR_BIT

	/* Function Set */
	SendHalfDataPort(0b0010);
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	0e 94 32 02 	call	0x464	; 0x464 <SendHalfDataPort>
	SendEnablePulse();
     5aa:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SendEnablePulse>
	SendHalfDataPort(0b0010);
     5ae:	82 e0       	ldi	r24, 0x02	; 2
     5b0:	0e 94 32 02 	call	0x464	; 0x464 <SendHalfDataPort>
	SendEnablePulse();
     5b4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SendEnablePulse>
	SendHalfDataPort(0b1100);
     5b8:	8c e0       	ldi	r24, 0x0C	; 12
     5ba:	0e 94 32 02 	call	0x464	; 0x464 <SendHalfDataPort>
	SendEnablePulse();
     5be:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SendEnablePulse>
#else
	Error : " The configuration is wrong "
#endif

	/* Display Control */
	LCD_enuWriteCommand(0b00001111);
     5c2:	8f e0       	ldi	r24, 0x0F	; 15
     5c4:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_enuWriteCommand>

	/* Display Clear */
	LCD_enuClear();
     5c8:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_enuClear>



	return Local_enuErrorState;
}
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	08 95       	ret

000005d0 <LCD_enuWriteData>:

	return Local_enuErrorState;
}

ES_t LCD_enuWriteData(u8 Copy_u8Data)
{
     5d0:	cf 93       	push	r28
     5d2:	c8 2f       	mov	r28, r24
	ES_t Local_enuErrorState = ES_OK;

	/* Set RS to one for writing data */
	DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_HIGH_LEVEL);
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	61 e0       	ldi	r22, 0x01	; 1
     5d8:	41 e0       	ldi	r20, 0x01	; 1
     5da:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_enuSetPinValue>

	/* Set RW to zero for writing */
	DIO_enuSetPinValue(LCD_RW_GRP,LCD_RW_PIN,DIO_LOW_LEVEL);
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	62 e0       	ldi	r22, 0x02	; 2
     5e2:	40 e0       	ldi	r20, 0x00	; 0
     5e4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_enuSetPinValue>
	SendEnablePulse();

#elif LCD_MODE == LCD_FOUR_BIT

	/* Write higher data to data pins */
	SendHalfDataPort(Copy_u8Data >> 4);
     5e8:	8c 2f       	mov	r24, r28
     5ea:	82 95       	swap	r24
     5ec:	8f 70       	andi	r24, 0x0F	; 15
     5ee:	0e 94 32 02 	call	0x464	; 0x464 <SendHalfDataPort>

	/*Set enable pulse */
	SendEnablePulse();
     5f2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SendEnablePulse>

	/* Write lower data to data pins */
	SendHalfDataPort(Copy_u8Data);
     5f6:	8c 2f       	mov	r24, r28
     5f8:	0e 94 32 02 	call	0x464	; 0x464 <SendHalfDataPort>

	/*Set enable pulse */
	SendEnablePulse();
     5fc:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SendEnablePulse>

#endif

	return Local_enuErrorState;

}
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	cf 91       	pop	r28
     604:	08 95       	ret

00000606 <LCD_enuWriteString>:

ES_t LCD_enuWriteString(const char* Copy_pchString)
{
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	8c 01       	movw	r16, r24
	ES_t Local_enuErrorState = ES_NOK;
	u8 Local_u8Counter = 0;

	if(Copy_pchString != NULL )
     60e:	00 97       	sbiw	r24, 0x00	; 0
     610:	81 f0       	breq	.+32     	; 0x632 <LCD_enuWriteString+0x2c>
	{
		while(Copy_pchString[Local_u8Counter] != '\0')
     612:	fc 01       	movw	r30, r24
     614:	80 81       	ld	r24, Z
     616:	88 23       	and	r24, r24
     618:	71 f0       	breq	.+28     	; 0x636 <LCD_enuWriteString+0x30>
     61a:	c0 e0       	ldi	r28, 0x00	; 0
		{
			LCD_enuWriteData(Copy_pchString[Local_u8Counter]);
     61c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LCD_enuWriteData>
			Local_u8Counter++;
     620:	cf 5f       	subi	r28, 0xFF	; 255
	ES_t Local_enuErrorState = ES_NOK;
	u8 Local_u8Counter = 0;

	if(Copy_pchString != NULL )
	{
		while(Copy_pchString[Local_u8Counter] != '\0')
     622:	f8 01       	movw	r30, r16
     624:	ec 0f       	add	r30, r28
     626:	f1 1d       	adc	r31, r1
     628:	80 81       	ld	r24, Z
     62a:	88 23       	and	r24, r24
     62c:	b9 f7       	brne	.-18     	; 0x61c <LCD_enuWriteString+0x16>
		{
			LCD_enuWriteData(Copy_pchString[Local_u8Counter]);
			Local_u8Counter++;
		}
		Local_enuErrorState = ES_OK;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	03 c0       	rjmp	.+6      	; 0x638 <LCD_enuWriteString+0x32>
	}
	else
	{
		Local_enuErrorState = NULL_POINTER;
     632:	83 e0       	ldi	r24, 0x03	; 3
     634:	01 c0       	rjmp	.+2      	; 0x638 <LCD_enuWriteString+0x32>
		while(Copy_pchString[Local_u8Counter] != '\0')
		{
			LCD_enuWriteData(Copy_pchString[Local_u8Counter]);
			Local_u8Counter++;
		}
		Local_enuErrorState = ES_OK;
     636:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_enuErrorState = NULL_POINTER;
	}

	return Local_enuErrorState;
}
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	08 95       	ret

00000640 <LCD_enuWriteIntegerNumber>:

ES_t LCD_enuWriteIntegerNumber(s32 Copy_s32IntegerNumber)
{
     640:	4f 92       	push	r4
     642:	5f 92       	push	r5
     644:	6f 92       	push	r6
     646:	7f 92       	push	r7
     648:	8f 92       	push	r8
     64a:	9f 92       	push	r9
     64c:	af 92       	push	r10
     64e:	bf 92       	push	r11
     650:	cf 92       	push	r12
     652:	df 92       	push	r13
     654:	ef 92       	push	r14
     656:	ff 92       	push	r15
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	6b 01       	movw	r12, r22
     660:	7c 01       	movw	r14, r24
	ES_t Local_enuErrorState = ES_OK;
	u32 Local_u32OppositedNumber = 0;
	u8 Local_u8CurrentDigit = 0;

	if(Copy_s32IntegerNumber < 0)
     662:	99 23       	and	r25, r25
     664:	5c f4       	brge	.+22     	; 0x67c <LCD_enuWriteIntegerNumber+0x3c>
	{
		LCD_enuWriteData('-');
     666:	8d e2       	ldi	r24, 0x2D	; 45
     668:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LCD_enuWriteData>
		Copy_s32IntegerNumber *= -1;
     66c:	f0 94       	com	r15
     66e:	e0 94       	com	r14
     670:	d0 94       	com	r13
     672:	c0 94       	com	r12
     674:	c1 1c       	adc	r12, r1
     676:	d1 1c       	adc	r13, r1
     678:	e1 1c       	adc	r14, r1
     67a:	f1 1c       	adc	r15, r1
	}

	while(Copy_s32IntegerNumber != 0)
     67c:	c1 14       	cp	r12, r1
     67e:	d1 04       	cpc	r13, r1
     680:	e1 04       	cpc	r14, r1
     682:	f1 04       	cpc	r15, r1
     684:	29 f1       	breq	.+74     	; 0x6d0 <LCD_enuWriteIntegerNumber+0x90>
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	cb 01       	movw	r24, r22
	{
		Local_u32OppositedNumber = Local_u32OppositedNumber * 10 +  Copy_s32IntegerNumber % 10 ;
     68c:	0f 2e       	mov	r0, r31
     68e:	fa e0       	ldi	r31, 0x0A	; 10
     690:	8f 2e       	mov	r8, r31
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	9f 2e       	mov	r9, r31
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	af 2e       	mov	r10, r31
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	bf 2e       	mov	r11, r31
     69e:	f0 2d       	mov	r31, r0
     6a0:	a5 01       	movw	r20, r10
     6a2:	94 01       	movw	r18, r8
     6a4:	0e 94 29 0a 	call	0x1452	; 0x1452 <__mulsi3>
     6a8:	2b 01       	movw	r4, r22
     6aa:	3c 01       	movw	r6, r24
     6ac:	c7 01       	movw	r24, r14
     6ae:	b6 01       	movw	r22, r12
     6b0:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__divmodsi4>
     6b4:	64 0d       	add	r22, r4
     6b6:	75 1d       	adc	r23, r5
     6b8:	86 1d       	adc	r24, r6
     6ba:	97 1d       	adc	r25, r7
		Copy_s32IntegerNumber /= 10;
     6bc:	c2 2e       	mov	r12, r18
     6be:	d3 2e       	mov	r13, r19
     6c0:	e4 2e       	mov	r14, r20
     6c2:	f5 2e       	mov	r15, r21
	{
		LCD_enuWriteData('-');
		Copy_s32IntegerNumber *= -1;
	}

	while(Copy_s32IntegerNumber != 0)
     6c4:	c1 14       	cp	r12, r1
     6c6:	d1 04       	cpc	r13, r1
     6c8:	e1 04       	cpc	r14, r1
     6ca:	f1 04       	cpc	r15, r1
     6cc:	49 f7       	brne	.-46     	; 0x6a0 <LCD_enuWriteIntegerNumber+0x60>
     6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <LCD_enuWriteIntegerNumber+0x96>
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	cb 01       	movw	r24, r22
		Copy_s32IntegerNumber /= 10;
	}

	do
	{
		Local_u8CurrentDigit = Local_u32OppositedNumber % 10;
     6d6:	0f 2e       	mov	r0, r31
     6d8:	fa e0       	ldi	r31, 0x0A	; 10
     6da:	ef 2e       	mov	r14, r31
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	ff 2e       	mov	r15, r31
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	0f 2f       	mov	r16, r31
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	1f 2f       	mov	r17, r31
     6e8:	f0 2d       	mov	r31, r0
     6ea:	a8 01       	movw	r20, r16
     6ec:	97 01       	movw	r18, r14
     6ee:	0e 94 48 0a 	call	0x1490	; 0x1490 <__udivmodsi4>
     6f2:	82 2e       	mov	r8, r18
     6f4:	c3 2e       	mov	r12, r19
     6f6:	44 2e       	mov	r4, r20
     6f8:	c5 2f       	mov	r28, r21
		LCD_enuWriteData(Local_u8CurrentDigit + 48);
     6fa:	86 2f       	mov	r24, r22
     6fc:	80 5d       	subi	r24, 0xD0	; 208
     6fe:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LCD_enuWriteData>
		Local_u32OppositedNumber /= 10;
     702:	68 2d       	mov	r22, r8
     704:	7c 2d       	mov	r23, r12
     706:	84 2d       	mov	r24, r4
     708:	9c 2f       	mov	r25, r28
	}while(Local_u32OppositedNumber != 0);
     70a:	61 15       	cp	r22, r1
     70c:	71 05       	cpc	r23, r1
     70e:	81 05       	cpc	r24, r1
     710:	91 05       	cpc	r25, r1
     712:	59 f7       	brne	.-42     	; 0x6ea <LCD_enuWriteIntegerNumber+0xaa>


	return Local_enuErrorState;
}
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	ff 90       	pop	r15
     71e:	ef 90       	pop	r14
     720:	df 90       	pop	r13
     722:	cf 90       	pop	r12
     724:	bf 90       	pop	r11
     726:	af 90       	pop	r10
     728:	9f 90       	pop	r9
     72a:	8f 90       	pop	r8
     72c:	7f 90       	pop	r7
     72e:	6f 90       	pop	r6
     730:	5f 90       	pop	r5
     732:	4f 90       	pop	r4
     734:	08 95       	ret

00000736 <LCD_enuWriteFloatNumber>:

ES_t LCD_enuWriteFloatNumber(f64 Copy_f64FloatNumber)
{
     736:	8f 92       	push	r8
     738:	9f 92       	push	r9
     73a:	af 92       	push	r10
     73c:	bf 92       	push	r11
     73e:	cf 92       	push	r12
     740:	df 92       	push	r13
     742:	ef 92       	push	r14
     744:	ff 92       	push	r15
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	6b 01       	movw	r12, r22
     750:	7c 01       	movw	r14, r24
	ES_t Local_enuErrorState = ES_OK;
	u64 Local_u64IntegerNumber = 0;
	u8 Local_u8Decimal = 0;

	if(Copy_f64FloatNumber < 0)
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	a9 01       	movw	r20, r18
     758:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__cmpsf2>
     75c:	88 23       	and	r24, r24
     75e:	3c f4       	brge	.+14     	; 0x76e <LCD_enuWriteFloatNumber+0x38>
	{
		LCD_enuWriteData('-');
     760:	8d e2       	ldi	r24, 0x2D	; 45
     762:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LCD_enuWriteData>
		Copy_f64FloatNumber *= -1;
     766:	f7 fa       	bst	r15, 7
     768:	f0 94       	com	r15
     76a:	f7 f8       	bld	r15, 7
     76c:	f0 94       	com	r15
	}

	Local_u64IntegerNumber = Copy_f64FloatNumber;
     76e:	c7 01       	movw	r24, r14
     770:	b6 01       	movw	r22, r12
     772:	0e 94 1f 08 	call	0x103e	; 0x103e <__fixunssfdi>
     776:	02 2f       	mov	r16, r18
     778:	13 2f       	mov	r17, r19
     77a:	d4 2f       	mov	r29, r20
     77c:	c5 2f       	mov	r28, r21
     77e:	b6 2e       	mov	r11, r22
     780:	a7 2e       	mov	r10, r23
     782:	98 2e       	mov	r9, r24
     784:	89 2e       	mov	r8, r25
	Local_u8Decimal = (Copy_f64FloatNumber - (f64)Local_u64IntegerNumber) * 100;

	LCD_enuWriteIntegerNumber(Local_u64IntegerNumber);
     786:	62 2f       	mov	r22, r18
     788:	71 2f       	mov	r23, r17
     78a:	8d 2f       	mov	r24, r29
     78c:	9c 2f       	mov	r25, r28
     78e:	0e 94 20 03 	call	0x640	; 0x640 <LCD_enuWriteIntegerNumber>
	LCD_enuWriteData('.');
     792:	8e e2       	ldi	r24, 0x2E	; 46
     794:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LCD_enuWriteData>
		LCD_enuWriteData('-');
		Copy_f64FloatNumber *= -1;
	}

	Local_u64IntegerNumber = Copy_f64FloatNumber;
	Local_u8Decimal = (Copy_f64FloatNumber - (f64)Local_u64IntegerNumber) * 100;
     798:	20 2f       	mov	r18, r16
     79a:	31 2f       	mov	r19, r17
     79c:	4d 2f       	mov	r20, r29
     79e:	5c 2f       	mov	r21, r28
     7a0:	6b 2d       	mov	r22, r11
     7a2:	7a 2d       	mov	r23, r10
     7a4:	89 2d       	mov	r24, r9
     7a6:	98 2d       	mov	r25, r8
     7a8:	0e 94 80 08 	call	0x1100	; 0x1100 <__floatundisf>
     7ac:	9b 01       	movw	r18, r22
     7ae:	ac 01       	movw	r20, r24
     7b0:	c7 01       	movw	r24, r14
     7b2:	b6 01       	movw	r22, r12
     7b4:	0e 94 49 07 	call	0xe92	; 0xe92 <__subsf3>
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	48 ec       	ldi	r20, 0xC8	; 200
     7be:	52 e4       	ldi	r21, 0x42	; 66
     7c0:	0e 94 43 09 	call	0x1286	; 0x1286 <__mulsf3>
     7c4:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__fixunssfsi>

	LCD_enuWriteIntegerNumber(Local_u64IntegerNumber);
	LCD_enuWriteData('.');
	LCD_enuWriteIntegerNumber(Local_u8Decimal);
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 20 03 	call	0x640	; 0x640 <LCD_enuWriteIntegerNumber>

	return Local_enuErrorState;
}
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	df 90       	pop	r13
     7e2:	cf 90       	pop	r12
     7e4:	bf 90       	pop	r11
     7e6:	af 90       	pop	r10
     7e8:	9f 90       	pop	r9
     7ea:	8f 90       	pop	r8
     7ec:	08 95       	ret

000007ee <LCD_enuReturnHome>:

ES_t LCD_enuReturnHome()
{
	ES_t Local_enuErrorState = ES_OK;

	LCD_enuWriteCommand(0b00000010);
     7ee:	82 e0       	ldi	r24, 0x02	; 2
     7f0:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_enuWriteCommand>

	return Local_enuErrorState;
}
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	08 95       	ret

000007f8 <LCD_enuGoToXYPosition>:
ES_t LCD_enuGoToXYPosition(u8 Copy_u8XPosition,u8 Copy_u8YPosition)
{
	ES_t Local_enuErrorState = ES_NOK;
	u8 Local_u8DDRAMAddress;

	if( Copy_u8YPosition == 0 || Copy_u8YPosition == 1)
     7f8:	62 30       	cpi	r22, 0x02	; 2
     7fa:	50 f4       	brcc	.+20     	; 0x810 <LCD_enuGoToXYPosition+0x18>
	{

		Local_u8DDRAMAddress = Copy_u8XPosition + Copy_u8YPosition * 0x40 ;
     7fc:	62 95       	swap	r22
     7fe:	66 0f       	add	r22, r22
     800:	66 0f       	add	r22, r22
     802:	60 7c       	andi	r22, 0xC0	; 192
     804:	86 0f       	add	r24, r22
		Local_u8DDRAMAddress = Local_u8DDRAMAddress | (LCD_BIT_MASK << 7 );
		LCD_enuWriteCommand(Local_u8DDRAMAddress);
     806:	80 68       	ori	r24, 0x80	; 128
     808:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_enuWriteCommand>


		Local_enuErrorState = ES_OK;
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	08 95       	ret
	}
	else
	{
		Local_enuErrorState = OUT_OF_RANGE;
     810:	82 e0       	ldi	r24, 0x02	; 2
	}

	return Local_enuErrorState;
}
     812:	08 95       	ret

00000814 <LCD_enuWriteSpecialCharacter>:

ES_t LCD_enuWriteSpecialCharacter(u8 Copy_Au8LetterArray[] ,u8 Copy_u8BlockNumber,u8 Copy_u8XPosition ,u8 Copy_u8YPosition)
{
     814:	df 92       	push	r13
     816:	ef 92       	push	r14
     818:	ff 92       	push	r15
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	08 2f       	mov	r16, r24
     824:	f9 2e       	mov	r15, r25
     826:	16 2f       	mov	r17, r22
     828:	e4 2e       	mov	r14, r20
     82a:	d2 2e       	mov	r13, r18
	ES_t Local_enuErrorState = ES_NOK;
	u8 Local_u8CGRAMAddress;
	u8 Local_u8Iterator;

	/* Calculate the starting address in CGRAM */
	Local_u8CGRAMAddress = Copy_u8BlockNumber * LCD_u8BLOCKBYTES ;
     82c:	86 2f       	mov	r24, r22
     82e:	88 0f       	add	r24, r24
     830:	88 0f       	add	r24, r24
     832:	88 0f       	add	r24, r24
	Local_u8CGRAMAddress = Local_u8CGRAMAddress | (LCD_BIT_MASK << 6 );
	//Local_u8CGRAMAddress = Local_u8CGRAMAddress & (~(LCD_BIT_MASK << 7 ));

	/* Set CGRAM address command */
	LCD_enuWriteCommand(Local_u8CGRAMAddress);
     834:	80 64       	ori	r24, 0x40	; 64
     836:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_enuWriteCommand>
     83a:	c0 2f       	mov	r28, r16
     83c:	df 2d       	mov	r29, r15

	/* Draw the pattern inside CGRAM */
	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator ++)
     83e:	00 e0       	ldi	r16, 0x00	; 0
	{
		LCD_enuWriteData(Copy_Au8LetterArray[Local_u8Iterator] );
     840:	89 91       	ld	r24, Y+
     842:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LCD_enuWriteData>

	/* Set CGRAM address command */
	LCD_enuWriteCommand(Local_u8CGRAMAddress);

	/* Draw the pattern inside CGRAM */
	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator ++)
     846:	0f 5f       	subi	r16, 0xFF	; 255
     848:	08 30       	cpi	r16, 0x08	; 8
     84a:	d1 f7       	brne	.-12     	; 0x840 <LCD_enuWriteSpecialCharacter+0x2c>
	{
		LCD_enuWriteData(Copy_Au8LetterArray[Local_u8Iterator] );
	}

	/* Go back to DDRAM to display the pattern */
	LCD_enuGoToXYPosition(Copy_u8XPosition,Copy_u8YPosition);
     84c:	8e 2d       	mov	r24, r14
     84e:	6d 2d       	mov	r22, r13
     850:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <LCD_enuGoToXYPosition>

	/* Display the drawn pattern */
	LCD_enuWriteData(Copy_u8BlockNumber);
     854:	81 2f       	mov	r24, r17
     856:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LCD_enuWriteData>

	return Local_enuErrorState;
}
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	08 95       	ret

0000086c <LCD_enuDeleteCharacter>:

ES_t LCD_enuDeleteCharacter(u8 Copy_u8ShiftedNumber)
{
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	d8 2f       	mov	r29, r24
	ES_t Local_enuErrorState = ES_OK;

	for(u8 Local_u8Iterator = 0 ; Local_u8Iterator < Copy_u8ShiftedNumber ; Local_u8Iterator ++)
     872:	88 23       	and	r24, r24
     874:	39 f0       	breq	.+14     	; 0x884 <LCD_enuDeleteCharacter+0x18>
     876:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_enuWriteCommand(0x10);
     878:	80 e1       	ldi	r24, 0x10	; 16
     87a:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_enuWriteCommand>

ES_t LCD_enuDeleteCharacter(u8 Copy_u8ShiftedNumber)
{
	ES_t Local_enuErrorState = ES_OK;

	for(u8 Local_u8Iterator = 0 ; Local_u8Iterator < Copy_u8ShiftedNumber ; Local_u8Iterator ++)
     87e:	cf 5f       	subi	r28, 0xFF	; 255
     880:	cd 17       	cp	r28, r29
     882:	d1 f7       	brne	.-12     	; 0x878 <LCD_enuDeleteCharacter+0xc>
	{
		LCD_enuWriteCommand(0x10);
	}
	LCD_enuWriteData(' ');
     884:	80 e2       	ldi	r24, 0x20	; 32
     886:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LCD_enuWriteData>
	LCD_enuWriteCommand(0x10);
     88a:	80 e1       	ldi	r24, 0x10	; 16
     88c:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_enuWriteCommand>

	return Local_enuErrorState;
}
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	08 95       	ret

00000898 <Convert_To_Number>:
	}
}

u8 Convert_To_Number(u8 Copy_u8Letter)
{
	if(Copy_u8Letter >= 65 &&  Copy_u8Letter <= 70)
     898:	98 2f       	mov	r25, r24
     89a:	91 54       	subi	r25, 0x41	; 65
     89c:	96 30       	cpi	r25, 0x06	; 6
     89e:	10 f4       	brcc	.+4      	; 0x8a4 <Convert_To_Number+0xc>
	{
		return (Copy_u8Letter - 55 );
     8a0:	87 53       	subi	r24, 0x37	; 55
     8a2:	08 95       	ret
	}
	else if(Copy_u8Letter == 48)
     8a4:	80 33       	cpi	r24, 0x30	; 48
     8a6:	11 f0       	breq	.+4      	; 0x8ac <Convert_To_Number+0x14>
	{
		return 0;
	}
	else
	{
		return ( Copy_u8Letter - 48 ) ;
     8a8:	80 53       	subi	r24, 0x30	; 48
     8aa:	08 95       	ret
	{
		return (Copy_u8Letter - 55 );
	}
	else if(Copy_u8Letter == 48)
	{
		return 0;
     8ac:	80 e0       	ldi	r24, 0x00	; 0
	{
		return ( Copy_u8Letter - 48 ) ;
	}

	
}
     8ae:	08 95       	ret

000008b0 <TriangularWave>:
	_delay_us(100);
	}
}

void TriangularWave()
{
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	0f 92       	push	r0
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
		u8 Local_u8FrequencyValue = 0;
		u8 Local_u8Amplitude =0;
		u8 Local_u8ReceivedData = 0;
     8ba:	19 82       	std	Y+1, r1	; 0x01
		

		//Receive the Amplitude of the signal
		
		UART_enuReceiveData( &Local_u8ReceivedData );
     8bc:	ce 01       	movw	r24, r28
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_enuReceiveData>
		Local_u8Amplitude = Local_u8Amplitude * 10 + Convert_To_Number(Local_u8ReceivedData );
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	0e 94 4c 04 	call	0x898	; 0x898 <Convert_To_Number>
     8ca:	18 2f       	mov	r17, r24
		LCD_enuWriteIntegerNumber(Local_u8Amplitude);
     8cc:	68 2f       	mov	r22, r24
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 20 03 	call	0x640	; 0x640 <LCD_enuWriteIntegerNumber>
		LCD_enuWriteString(" ");
     8d8:	0f 2e       	mov	r0, r31
     8da:	f0 e6       	ldi	r31, 0x60	; 96
     8dc:	ef 2e       	mov	r14, r31
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	ff 2e       	mov	r15, r31
     8e2:	f0 2d       	mov	r31, r0
     8e4:	c7 01       	movw	r24, r14
     8e6:	0e 94 03 03 	call	0x606	; 0x606 <LCD_enuWriteString>
		UART_enuReceiveData( &Local_u8ReceivedData );
     8ea:	ce 01       	movw	r24, r28
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_enuReceiveData>
		Local_u8Amplitude = Local_u8Amplitude * 10 + Convert_To_Number(Local_u8ReceivedData );
     8f2:	89 81       	ldd	r24, Y+1	; 0x01
     8f4:	0e 94 4c 04 	call	0x898	; 0x898 <Convert_To_Number>
     8f8:	11 0f       	add	r17, r17
     8fa:	91 2f       	mov	r25, r17
     8fc:	99 0f       	add	r25, r25
     8fe:	99 0f       	add	r25, r25
     900:	19 0f       	add	r17, r25
     902:	18 0f       	add	r17, r24
		LCD_enuWriteIntegerNumber(Local_u8Amplitude);
     904:	61 2f       	mov	r22, r17
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 20 03 	call	0x640	; 0x640 <LCD_enuWriteIntegerNumber>
		LCD_enuWriteString(" ");
     910:	c7 01       	movw	r24, r14
     912:	0e 94 03 03 	call	0x606	; 0x606 <LCD_enuWriteString>
		UART_enuReceiveData( &Local_u8ReceivedData );
     916:	ce 01       	movw	r24, r28
     918:	01 96       	adiw	r24, 0x01	; 1
     91a:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_enuReceiveData>
		Local_u8Amplitude = Local_u8Amplitude * 10 + Convert_To_Number(Local_u8ReceivedData );
     91e:	11 0f       	add	r17, r17
     920:	81 2f       	mov	r24, r17
     922:	88 0f       	add	r24, r24
     924:	88 0f       	add	r24, r24
     926:	18 0f       	add	r17, r24
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	0e 94 4c 04 	call	0x898	; 0x898 <Convert_To_Number>
     92e:	18 0f       	add	r17, r24
		LCD_enuWriteIntegerNumber(Local_u8Amplitude);
     930:	61 2f       	mov	r22, r17
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 20 03 	call	0x640	; 0x640 <LCD_enuWriteIntegerNumber>
		
		
		UART_enuSendData('<');
     93c:	8c e3       	ldi	r24, 0x3C	; 60
     93e:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
		UART_enuSendData('4');
     942:	84 e3       	ldi	r24, 0x34	; 52
     944:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
		UART_enuSendData('2');
     948:	82 e3       	ldi	r24, 0x32	; 50
     94a:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
		UART_enuSendData(')');
     94e:	89 e2       	ldi	r24, 0x29	; 41
     950:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
		UART_enuSendData('!');
     954:	81 e2       	ldi	r24, 0x21	; 33
     956:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
		UART_enuSendData('.');
     95a:	8e e2       	ldi	r24, 0x2E	; 46
     95c:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
		UART_enuSendData(',');
     960:	8c e2       	ldi	r24, 0x2C	; 44
     962:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
		UART_enuSendData('%');
     966:	85 e2       	ldi	r24, 0x25	; 37
     968:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>

	while(1)
	{
		
		for(u8 Local_u8Iterator1=0;Local_u8Iterator1<Local_u8Amplitude;Local_u8Iterator1++) PORTC = Local_u8Iterator1;
     96c:	80 e0       	ldi	r24, 0x00	; 0
		for(u8 Local_u8Iterator2=Local_u8Amplitude;Local_u8Iterator2>0;Local_u8Iterator2--) PORTC = Local_u8Iterator2;
     96e:	21 2f       	mov	r18, r17
		UART_enuSendData('%');

	while(1)
	{
		
		for(u8 Local_u8Iterator1=0;Local_u8Iterator1<Local_u8Amplitude;Local_u8Iterator1++) PORTC = Local_u8Iterator1;
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	04 c0       	rjmp	.+8      	; 0x97c <TriangularWave+0xcc>
     974:	85 bb       	out	0x15, r24	; 21
     976:	8f 5f       	subi	r24, 0xFF	; 255
     978:	01 c0       	rjmp	.+2      	; 0x97c <TriangularWave+0xcc>
     97a:	89 2f       	mov	r24, r25
     97c:	81 17       	cp	r24, r17
     97e:	d0 f3       	brcs	.-12     	; 0x974 <TriangularWave+0xc4>
		for(u8 Local_u8Iterator2=Local_u8Amplitude;Local_u8Iterator2>0;Local_u8Iterator2--) PORTC = Local_u8Iterator2;
     980:	11 23       	and	r17, r17
     982:	d9 f3       	breq	.-10     	; 0x97a <TriangularWave+0xca>
     984:	82 2f       	mov	r24, r18
     986:	85 bb       	out	0x15, r24	; 21
     988:	81 50       	subi	r24, 0x01	; 1
     98a:	e9 f7       	brne	.-6      	; 0x986 <TriangularWave+0xd6>
		UART_enuSendData('%');

	while(1)
	{
		
		for(u8 Local_u8Iterator1=0;Local_u8Iterator1<Local_u8Amplitude;Local_u8Iterator1++) PORTC = Local_u8Iterator1;
     98c:	89 2f       	mov	r24, r25
     98e:	f6 cf       	rjmp	.-20     	; 0x97c <TriangularWave+0xcc>

00000990 <StaircaseWave>:

	
}

void StaircaseWave(void)
{
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	0f 92       	push	r0
     996:	cd b7       	in	r28, 0x3d	; 61
     998:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8FrequencyValue = 0;
	u8 Local_u8Amplitude =0;
	u8 Local_u8ReceivedData = 0;
     99a:	19 82       	std	Y+1, r1	; 0x01
	
	//Receive the Amplitude of the signal
	
	UART_enuReceiveData( &Local_u8ReceivedData );
     99c:	ce 01       	movw	r24, r28
     99e:	01 96       	adiw	r24, 0x01	; 1
     9a0:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_enuReceiveData>
	Local_u8Amplitude = Local_u8Amplitude * 10 + Convert_To_Number(Local_u8ReceivedData );
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	0e 94 4c 04 	call	0x898	; 0x898 <Convert_To_Number>
     9aa:	18 2f       	mov	r17, r24
	LCD_enuWriteIntegerNumber(Local_u8Amplitude);
     9ac:	68 2f       	mov	r22, r24
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 20 03 	call	0x640	; 0x640 <LCD_enuWriteIntegerNumber>
	LCD_enuWriteString(" ");
     9b8:	0f 2e       	mov	r0, r31
     9ba:	f0 e6       	ldi	r31, 0x60	; 96
     9bc:	ef 2e       	mov	r14, r31
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	ff 2e       	mov	r15, r31
     9c2:	f0 2d       	mov	r31, r0
     9c4:	c7 01       	movw	r24, r14
     9c6:	0e 94 03 03 	call	0x606	; 0x606 <LCD_enuWriteString>
	UART_enuReceiveData( &Local_u8ReceivedData );
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_enuReceiveData>
	Local_u8Amplitude = Local_u8Amplitude * 10 + Convert_To_Number(Local_u8ReceivedData );
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	0e 94 4c 04 	call	0x898	; 0x898 <Convert_To_Number>
     9d8:	11 0f       	add	r17, r17
     9da:	91 2f       	mov	r25, r17
     9dc:	99 0f       	add	r25, r25
     9de:	99 0f       	add	r25, r25
     9e0:	19 0f       	add	r17, r25
     9e2:	18 0f       	add	r17, r24
	LCD_enuWriteIntegerNumber(Local_u8Amplitude);
     9e4:	61 2f       	mov	r22, r17
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 20 03 	call	0x640	; 0x640 <LCD_enuWriteIntegerNumber>
	LCD_enuWriteString(" ");
     9f0:	c7 01       	movw	r24, r14
     9f2:	0e 94 03 03 	call	0x606	; 0x606 <LCD_enuWriteString>
	UART_enuReceiveData( &Local_u8ReceivedData );
     9f6:	ce 01       	movw	r24, r28
     9f8:	01 96       	adiw	r24, 0x01	; 1
     9fa:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_enuReceiveData>
	Local_u8Amplitude = Local_u8Amplitude * 10 + Convert_To_Number(Local_u8ReceivedData );
     9fe:	11 0f       	add	r17, r17
     a00:	81 2f       	mov	r24, r17
     a02:	88 0f       	add	r24, r24
     a04:	88 0f       	add	r24, r24
     a06:	18 0f       	add	r17, r24
     a08:	89 81       	ldd	r24, Y+1	; 0x01
     a0a:	0e 94 4c 04 	call	0x898	; 0x898 <Convert_To_Number>
     a0e:	18 0f       	add	r17, r24
	LCD_enuWriteIntegerNumber(Local_u8Amplitude);
     a10:	61 2f       	mov	r22, r17
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 20 03 	call	0x640	; 0x640 <LCD_enuWriteIntegerNumber>
	
	UART_enuSendData('<');
     a1c:	8c e3       	ldi	r24, 0x3C	; 60
     a1e:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
		
		UART_enuSendData('3');
     a22:	83 e3       	ldi	r24, 0x33	; 51
     a24:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
		UART_enuSendData('4');
     a28:	84 e3       	ldi	r24, 0x34	; 52
     a2a:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
		UART_enuSendData('!');
     a2e:	81 e2       	ldi	r24, 0x21	; 33
     a30:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
		UART_enuSendData(')');
     a34:	89 e2       	ldi	r24, 0x29	; 41
     a36:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
		UART_enuSendData('2');
     a3a:	82 e3       	ldi	r24, 0x32	; 50
     a3c:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
		UART_enuSendData('#');
     a40:	83 e2       	ldi	r24, 0x23	; 35
     a42:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
		UART_enuSendData('!');
     a46:	81 e2       	ldi	r24, 0x21	; 33
     a48:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
		UART_enuSendData('3');
     a4c:	83 e3       	ldi	r24, 0x33	; 51
     a4e:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
		UART_enuSendData('%');
     a52:	85 e2       	ldi	r24, 0x25	; 37
     a54:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
	{
		
	
	PORTC = 0x00;
	_delay_ms(5);
	PORTC = Local_u8Amplitude-190;
     a58:	21 2f       	mov	r18, r17
     a5a:	2e 5b       	subi	r18, 0xBE	; 190
	_delay_ms(5);
	PORTC = Local_u8Amplitude - 125;
     a5c:	91 2f       	mov	r25, r17
     a5e:	9d 57       	subi	r25, 0x7D	; 125
	_delay_ms(5);
	PORTC = Local_u8Amplitude - 60;
     a60:	81 2f       	mov	r24, r17
     a62:	8c 53       	subi	r24, 0x3C	; 60
	
	while(1)
	{
		
	
	PORTC = 0x00;
     a64:	15 ba       	out	0x15, r1	; 21
     a66:	e1 ee       	ldi	r30, 0xE1	; 225
     a68:	f4 e0       	ldi	r31, 0x04	; 4
     a6a:	31 97       	sbiw	r30, 0x01	; 1
     a6c:	f1 f7       	brne	.-4      	; 0xa6a <StaircaseWave+0xda>
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <StaircaseWave+0xe0>
     a70:	00 00       	nop
	_delay_ms(5);
	PORTC = Local_u8Amplitude-190;
     a72:	25 bb       	out	0x15, r18	; 21
     a74:	e1 ee       	ldi	r30, 0xE1	; 225
     a76:	f4 e0       	ldi	r31, 0x04	; 4
     a78:	31 97       	sbiw	r30, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <StaircaseWave+0xe8>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <StaircaseWave+0xee>
     a7e:	00 00       	nop
	_delay_ms(5);
	PORTC = Local_u8Amplitude - 125;
     a80:	95 bb       	out	0x15, r25	; 21
     a82:	e1 ee       	ldi	r30, 0xE1	; 225
     a84:	f4 e0       	ldi	r31, 0x04	; 4
     a86:	31 97       	sbiw	r30, 0x01	; 1
     a88:	f1 f7       	brne	.-4      	; 0xa86 <StaircaseWave+0xf6>
     a8a:	00 c0       	rjmp	.+0      	; 0xa8c <StaircaseWave+0xfc>
     a8c:	00 00       	nop
	_delay_ms(5);
	PORTC = Local_u8Amplitude - 60;
     a8e:	85 bb       	out	0x15, r24	; 21
     a90:	e1 ee       	ldi	r30, 0xE1	; 225
     a92:	f4 e0       	ldi	r31, 0x04	; 4
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	f1 f7       	brne	.-4      	; 0xa94 <StaircaseWave+0x104>
     a98:	00 c0       	rjmp	.+0      	; 0xa9a <StaircaseWave+0x10a>
     a9a:	00 00       	nop
	_delay_ms(5);
	PORTC = Local_u8Amplitude;
     a9c:	15 bb       	out	0x15, r17	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a9e:	f1 e2       	ldi	r31, 0x21	; 33
     aa0:	fa 95       	dec	r31
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <StaircaseWave+0x110>
     aa4:	00 00       	nop
     aa6:	de cf       	rjmp	.-68     	; 0xa64 <StaircaseWave+0xd4>

00000aa8 <SquareWave>:




void SquareWave()
{
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	0f 92       	push	r0
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8FrequencyValue = 0;
	u8 Local_u8Amplitude =0;
	u8 Local_u8ReceivedData = 0;
     ab2:	19 82       	std	Y+1, r1	; 0x01
	


	//Receive the Frequency of signal
	UART_enuReceiveData( &Local_u8ReceivedData );
     ab4:	ce 01       	movw	r24, r28
     ab6:	01 96       	adiw	r24, 0x01	; 1
     ab8:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_enuReceiveData>
	Local_u8FrequencyValue = Local_u8FrequencyValue * 10 + Convert_To_Number(Local_u8ReceivedData );
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	0e 94 4c 04 	call	0x898	; 0x898 <Convert_To_Number>
     ac2:	18 2f       	mov	r17, r24
	UART_enuReceiveData( &Local_u8ReceivedData );
     ac4:	ce 01       	movw	r24, r28
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_enuReceiveData>
	Local_u8FrequencyValue = Local_u8FrequencyValue * 10 + Convert_To_Number(Local_u8ReceivedData );
     acc:	89 81       	ldd	r24, Y+1	; 0x01
     ace:	0e 94 4c 04 	call	0x898	; 0x898 <Convert_To_Number>
     ad2:	11 0f       	add	r17, r17
     ad4:	91 2f       	mov	r25, r17
     ad6:	99 0f       	add	r25, r25
     ad8:	99 0f       	add	r25, r25
     ada:	19 0f       	add	r17, r25
     adc:	01 2f       	mov	r16, r17
     ade:	08 0f       	add	r16, r24
	LCD_enuWriteIntegerNumber(Local_u8FrequencyValue);
     ae0:	60 2f       	mov	r22, r16
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 20 03 	call	0x640	; 0x640 <LCD_enuWriteIntegerNumber>
	LCD_enuWriteString(" ");
     aec:	0f 2e       	mov	r0, r31
     aee:	f0 e6       	ldi	r31, 0x60	; 96
     af0:	ef 2e       	mov	r14, r31
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	ff 2e       	mov	r15, r31
     af6:	f0 2d       	mov	r31, r0
     af8:	c7 01       	movw	r24, r14
     afa:	0e 94 03 03 	call	0x606	; 0x606 <LCD_enuWriteString>

	//Receive the Amplitude of the signal
	
	UART_enuReceiveData( &Local_u8ReceivedData );
     afe:	ce 01       	movw	r24, r28
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_enuReceiveData>
	Local_u8Amplitude = Local_u8Amplitude * 10 + Convert_To_Number(Local_u8ReceivedData );
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	0e 94 4c 04 	call	0x898	; 0x898 <Convert_To_Number>
     b0c:	18 2f       	mov	r17, r24
	LCD_enuWriteIntegerNumber(Local_u8Amplitude);
     b0e:	68 2f       	mov	r22, r24
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 20 03 	call	0x640	; 0x640 <LCD_enuWriteIntegerNumber>
	LCD_enuWriteString(" ");
     b1a:	c7 01       	movw	r24, r14
     b1c:	0e 94 03 03 	call	0x606	; 0x606 <LCD_enuWriteString>
	UART_enuReceiveData( &Local_u8ReceivedData );
     b20:	ce 01       	movw	r24, r28
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_enuReceiveData>
	Local_u8Amplitude = Local_u8Amplitude * 10 + Convert_To_Number(Local_u8ReceivedData );
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	0e 94 4c 04 	call	0x898	; 0x898 <Convert_To_Number>
     b2e:	11 0f       	add	r17, r17
     b30:	91 2f       	mov	r25, r17
     b32:	99 0f       	add	r25, r25
     b34:	99 0f       	add	r25, r25
     b36:	19 0f       	add	r17, r25
     b38:	18 0f       	add	r17, r24
	LCD_enuWriteIntegerNumber(Local_u8Amplitude);
     b3a:	61 2f       	mov	r22, r17
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 20 03 	call	0x640	; 0x640 <LCD_enuWriteIntegerNumber>
	LCD_enuWriteString(" ");
     b46:	c7 01       	movw	r24, r14
     b48:	0e 94 03 03 	call	0x606	; 0x606 <LCD_enuWriteString>
	UART_enuReceiveData( &Local_u8ReceivedData );
     b4c:	ce 01       	movw	r24, r28
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_enuReceiveData>
	Local_u8Amplitude = Local_u8Amplitude * 10 + Convert_To_Number(Local_u8ReceivedData );
     b54:	11 0f       	add	r17, r17
     b56:	81 2f       	mov	r24, r17
     b58:	88 0f       	add	r24, r24
     b5a:	88 0f       	add	r24, r24
     b5c:	18 0f       	add	r17, r24
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	0e 94 4c 04 	call	0x898	; 0x898 <Convert_To_Number>
     b64:	18 0f       	add	r17, r24
	LCD_enuWriteIntegerNumber(Local_u8Amplitude);
     b66:	61 2f       	mov	r22, r17
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 20 03 	call	0x640	; 0x640 <LCD_enuWriteIntegerNumber>
	
	
	UART_enuSendData('<');
     b72:	8c e3       	ldi	r24, 0x3C	; 60
     b74:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
	UART_enuSendData('3');
     b78:	83 e3       	ldi	r24, 0x33	; 51
     b7a:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
	UART_enuSendData('1');
     b7e:	81 e3       	ldi	r24, 0x31	; 49
     b80:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
	UART_enuSendData('5');
     b84:	85 e3       	ldi	r24, 0x35	; 53
     b86:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
	UART_enuSendData('!');
     b8a:	81 e2       	ldi	r24, 0x21	; 33
     b8c:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
	UART_enuSendData('2');
     b90:	82 e3       	ldi	r24, 0x32	; 50
     b92:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
	UART_enuSendData('%');
     b96:	85 e2       	ldi	r24, 0x25	; 37
     b98:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
	
	
		
	if(Local_u8FrequencyValue == 51)
     b9c:	03 33       	cpi	r16, 0x33	; 51
     b9e:	79 f4       	brne	.+30     	; 0xbbe <SquareWave+0x116>
	{
		while(1)
		{
			PORTC=Local_u8Amplitude;
     ba0:	15 bb       	out	0x15, r17	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ba2:	83 ec       	ldi	r24, 0xC3	; 195
     ba4:	99 e0       	ldi	r25, 0x09	; 9
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	f1 f7       	brne	.-4      	; 0xba6 <SquareWave+0xfe>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <SquareWave+0x104>
     bac:	00 00       	nop
			_delay_ms(10);
			PORTC=0;
     bae:	15 ba       	out	0x15, r1	; 21
     bb0:	83 ec       	ldi	r24, 0xC3	; 195
     bb2:	99 e0       	ldi	r25, 0x09	; 9
     bb4:	01 97       	sbiw	r24, 0x01	; 1
     bb6:	f1 f7       	brne	.-4      	; 0xbb4 <SquareWave+0x10c>
     bb8:	00 c0       	rjmp	.+0      	; 0xbba <SquareWave+0x112>
     bba:	00 00       	nop
     bbc:	f1 cf       	rjmp	.-30     	; 0xba0 <SquareWave+0xf8>
			_delay_ms(10);
		}				
	}	
		
	else if(Local_u8FrequencyValue == 99)
     bbe:	03 36       	cpi	r16, 0x63	; 99
     bc0:	79 f4       	brne	.+30     	; 0xbe0 <SquareWave+0x138>
	{
		while(1)
		{
			PORTC=Local_u8Amplitude;
     bc2:	15 bb       	out	0x15, r17	; 21
     bc4:	81 ee       	ldi	r24, 0xE1	; 225
     bc6:	94 e0       	ldi	r25, 0x04	; 4
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	f1 f7       	brne	.-4      	; 0xbc8 <SquareWave+0x120>
     bcc:	00 c0       	rjmp	.+0      	; 0xbce <SquareWave+0x126>
     bce:	00 00       	nop
			_delay_ms(5);
			PORTC=0;
     bd0:	15 ba       	out	0x15, r1	; 21
     bd2:	81 ee       	ldi	r24, 0xE1	; 225
     bd4:	94 e0       	ldi	r25, 0x04	; 4
     bd6:	01 97       	sbiw	r24, 0x01	; 1
     bd8:	f1 f7       	brne	.-4      	; 0xbd6 <SquareWave+0x12e>
     bda:	00 c0       	rjmp	.+0      	; 0xbdc <SquareWave+0x134>
     bdc:	00 00       	nop
     bde:	f1 cf       	rjmp	.-30     	; 0xbc2 <SquareWave+0x11a>
	}
	else
	{
		while(1)
		{
			PORTC=Local_u8Amplitude;
     be0:	15 bb       	out	0x15, r17	; 21
     be2:	83 ec       	ldi	r24, 0xC3	; 195
     be4:	99 e0       	ldi	r25, 0x09	; 9
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	f1 f7       	brne	.-4      	; 0xbe6 <SquareWave+0x13e>
     bea:	00 c0       	rjmp	.+0      	; 0xbec <SquareWave+0x144>
     bec:	00 00       	nop
			_delay_ms(10);
			PORTC=0;
     bee:	15 ba       	out	0x15, r1	; 21
     bf0:	83 ec       	ldi	r24, 0xC3	; 195
     bf2:	99 e0       	ldi	r25, 0x09	; 9
     bf4:	01 97       	sbiw	r24, 0x01	; 1
     bf6:	f1 f7       	brne	.-4      	; 0xbf4 <SquareWave+0x14c>
     bf8:	00 c0       	rjmp	.+0      	; 0xbfa <SquareWave+0x152>
     bfa:	00 00       	nop
     bfc:	f1 cf       	rjmp	.-30     	; 0xbe0 <SquareWave+0x138>

00000bfe <SinWave>:
	
	
}

void SinWave()
{
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	0f 92       	push	r0
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
	
	float angle, value;
		u8 Local_u8FrequencyValue = 0;
		u8 Local_u8Amplitude =0;
		u8 Local_u8ReceivedData = 0;
     c08:	19 82       	std	Y+1, r1	; 0x01
		


		//Receive the Frequency of signal
		UART_enuReceiveData( &Local_u8ReceivedData );
     c0a:	ce 01       	movw	r24, r28
     c0c:	01 96       	adiw	r24, 0x01	; 1
     c0e:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_enuReceiveData>
		Local_u8FrequencyValue = Local_u8FrequencyValue * 10 + Convert_To_Number(Local_u8ReceivedData );
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	0e 94 4c 04 	call	0x898	; 0x898 <Convert_To_Number>
     c18:	18 2f       	mov	r17, r24
		UART_enuReceiveData( &Local_u8ReceivedData );
     c1a:	ce 01       	movw	r24, r28
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_enuReceiveData>
		Local_u8FrequencyValue = Local_u8FrequencyValue * 10 + Convert_To_Number(Local_u8ReceivedData );
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	0e 94 4c 04 	call	0x898	; 0x898 <Convert_To_Number>
     c28:	11 0f       	add	r17, r17
     c2a:	91 2f       	mov	r25, r17
     c2c:	99 0f       	add	r25, r25
     c2e:	99 0f       	add	r25, r25
     c30:	19 0f       	add	r17, r25
     c32:	81 0f       	add	r24, r17
		LCD_enuWriteIntegerNumber(Local_u8FrequencyValue);
     c34:	68 2f       	mov	r22, r24
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 20 03 	call	0x640	; 0x640 <LCD_enuWriteIntegerNumber>
		LCD_enuWriteString(" ");
     c40:	80 e6       	ldi	r24, 0x60	; 96
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 03 03 	call	0x606	; 0x606 <LCD_enuWriteString>

		//Receive the Amplitude of the signal
		
		UART_enuReceiveData( &Local_u8ReceivedData );
     c48:	ce 01       	movw	r24, r28
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_enuReceiveData>
		Local_u8Amplitude = Local_u8Amplitude * 10 + Convert_To_Number(Local_u8ReceivedData );
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	0e 94 4c 04 	call	0x898	; 0x898 <Convert_To_Number>
     c56:	18 2f       	mov	r17, r24
		LCD_enuWriteIntegerNumber(Local_u8Amplitude);
     c58:	68 2f       	mov	r22, r24
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 20 03 	call	0x640	; 0x640 <LCD_enuWriteIntegerNumber>
		
		
		u8 i=0;
		UART_enuSendData('<');
     c64:	8c e3       	ldi	r24, 0x3C	; 60
     c66:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
     c6a:	02 e0       	ldi	r16, 0x02	; 2
		while(i<2)
		{
			
			UART_enuSendData('3');
     c6c:	83 e3       	ldi	r24, 0x33	; 51
     c6e:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
			UART_enuSendData(')');
     c72:	89 e2       	ldi	r24, 0x29	; 41
     c74:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
			UART_enuSendData('.');
     c78:	8e e2       	ldi	r24, 0x2E	; 46
     c7a:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
			UART_enuSendData('%');
     c7e:	85 e2       	ldi	r24, 0x25	; 37
     c80:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
			
			UART_enuSendData('s');
     c84:	83 e7       	ldi	r24, 0x73	; 115
     c86:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
			UART_enuSendData('i');
     c8a:	89 e6       	ldi	r24, 0x69	; 105
     c8c:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
			UART_enuSendData('n');
     c90:	8e e6       	ldi	r24, 0x6E	; 110
     c92:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
			UART_enuSendData('e');
     c96:	85 e6       	ldi	r24, 0x65	; 101
     c98:	0e 94 43 07 	call	0xe86	; 0xe86 <UART_enuSendData>
     c9c:	01 50       	subi	r16, 0x01	; 1
		LCD_enuWriteIntegerNumber(Local_u8Amplitude);
		
		
		u8 i=0;
		UART_enuSendData('<');
		while(i<2)
     c9e:	31 f7       	brne	.-52     	; 0xc6c <SinWave+0x6e>
			
		}
	
	
	
	if(Local_u8Amplitude == 2)
     ca0:	12 30       	cpi	r17, 0x02	; 2
     ca2:	09 f4       	brne	.+2      	; 0xca6 <SinWave+0xa8>
     ca4:	49 c0       	rjmp	.+146    	; 0xd38 <SinWave+0x13a>
     ca6:	ee 24       	eor	r14, r14
     ca8:	ff 24       	eor	r15, r15
     caa:	dd 24       	eor	r13, r13
	{
		while(1)
		{
			
			
			for (angle = 0; angle <= 360; angle += 10) {
     cac:	10 e0       	ldi	r17, 0x00	; 0
     cae:	a2 c0       	rjmp	.+324    	; 0xdf4 <SinWave+0x1f6>
		{
			
			
			for (angle = 0; angle <= 360; angle += 10) {
				// Convert angle to radians
				float radianAngle = angle * M_PI / 180.0;
     cb0:	8e 2d       	mov	r24, r14
     cb2:	9f 2d       	mov	r25, r15
     cb4:	a0 2f       	mov	r26, r16
     cb6:	bd 2d       	mov	r27, r13
     cb8:	bc 01       	movw	r22, r24
     cba:	cd 01       	movw	r24, r26
     cbc:	2b ed       	ldi	r18, 0xDB	; 219
     cbe:	3f e0       	ldi	r19, 0x0F	; 15
     cc0:	49 e4       	ldi	r20, 0x49	; 73
     cc2:	50 e4       	ldi	r21, 0x40	; 64
     cc4:	0e 94 43 09 	call	0x1286	; 0x1286 <__mulsf3>
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	44 e3       	ldi	r20, 0x34	; 52
     cce:	53 e4       	ldi	r21, 0x43	; 67
     cd0:	0e 94 b2 07 	call	0xf64	; 0xf64 <__divsf3>

				// Calculate analog output value using the equation: Value = 5 + 5 * sin(angle)
				value = Local_u8Amplitude + Local_u8Amplitude * sin(radianAngle);
     cd4:	0e 94 a6 09 	call	0x134c	; 0x134c <sin>
     cd8:	9b 01       	movw	r18, r22
     cda:	ac 01       	movw	r20, r24
     cdc:	0e 94 4a 07 	call	0xe94	; 0xe94 <__addsf3>
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	50 e4       	ldi	r21, 0x40	; 64
     ce8:	0e 94 4a 07 	call	0xe94	; 0xe94 <__addsf3>

				// Map the analog value to the DAC resolution
				uint8_t dacValue = (uint8_t)(value * 255 / 10.0);
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	4f e7       	ldi	r20, 0x7F	; 127
     cf2:	53 e4       	ldi	r21, 0x43	; 67
     cf4:	0e 94 43 09 	call	0x1286	; 0x1286 <__mulsf3>
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e2       	ldi	r20, 0x20	; 32
     cfe:	51 e4       	ldi	r21, 0x41	; 65
     d00:	0e 94 b2 07 	call	0xf64	; 0xf64 <__divsf3>
     d04:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__fixunssfsi>

				// Output the analog value to DAC
				PORTC = dacValue;
     d08:	65 bb       	out	0x15, r22	; 21
     d0a:	8d ea       	ldi	r24, 0xAD	; 173
     d0c:	90 e6       	ldi	r25, 0x60	; 96
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <SinWave+0x110>
     d12:	00 c0       	rjmp	.+0      	; 0xd14 <SinWave+0x116>
     d14:	00 00       	nop
	{
		while(1)
		{
			
			
			for (angle = 0; angle <= 360; angle += 10) {
     d16:	8e 2d       	mov	r24, r14
     d18:	9f 2d       	mov	r25, r15
     d1a:	a0 2f       	mov	r26, r16
     d1c:	bd 2d       	mov	r27, r13
     d1e:	bc 01       	movw	r22, r24
     d20:	cd 01       	movw	r24, r26
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e2       	ldi	r20, 0x20	; 32
     d28:	51 e4       	ldi	r21, 0x41	; 65
     d2a:	0e 94 4a 07 	call	0xe94	; 0xe94 <__addsf3>
     d2e:	e6 2e       	mov	r14, r22
     d30:	f7 2e       	mov	r15, r23
     d32:	08 2f       	mov	r16, r24
     d34:	d9 2e       	mov	r13, r25
     d36:	05 c0       	rjmp	.+10     	; 0xd42 <SinWave+0x144>
			
		}
	
	
	
	if(Local_u8Amplitude == 2)
     d38:	ee 24       	eor	r14, r14
     d3a:	ff 24       	eor	r15, r15
     d3c:	00 e0       	ldi	r16, 0x00	; 0
     d3e:	dd 24       	eor	r13, r13
	{
		while(1)
		{
			
			
			for (angle = 0; angle <= 360; angle += 10) {
     d40:	10 e0       	ldi	r17, 0x00	; 0
     d42:	8e 2d       	mov	r24, r14
     d44:	9f 2d       	mov	r25, r15
     d46:	a0 2f       	mov	r26, r16
     d48:	bd 2d       	mov	r27, r13
     d4a:	bc 01       	movw	r22, r24
     d4c:	cd 01       	movw	r24, r26
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	44 eb       	ldi	r20, 0xB4	; 180
     d54:	53 e4       	ldi	r21, 0x43	; 67
     d56:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__cmpsf2>
     d5a:	18 16       	cp	r1, r24
     d5c:	0c f0       	brlt	.+2      	; 0xd60 <SinWave+0x162>
     d5e:	a8 cf       	rjmp	.-176    	; 0xcb0 <SinWave+0xb2>
     d60:	e1 2e       	mov	r14, r17
     d62:	f1 2e       	mov	r15, r17
     d64:	01 2f       	mov	r16, r17
     d66:	d1 2e       	mov	r13, r17
     d68:	ec cf       	rjmp	.-40     	; 0xd42 <SinWave+0x144>
		{
			
			
			for (angle = 0; angle <= 360; angle += 10) {
				// Convert angle to radians
				float radianAngle = angle * M_PI / 180.0;
     d6a:	8e 2d       	mov	r24, r14
     d6c:	9f 2d       	mov	r25, r15
     d6e:	a0 2f       	mov	r26, r16
     d70:	bd 2d       	mov	r27, r13
     d72:	bc 01       	movw	r22, r24
     d74:	cd 01       	movw	r24, r26
     d76:	2b ed       	ldi	r18, 0xDB	; 219
     d78:	3f e0       	ldi	r19, 0x0F	; 15
     d7a:	49 e4       	ldi	r20, 0x49	; 73
     d7c:	50 e4       	ldi	r21, 0x40	; 64
     d7e:	0e 94 43 09 	call	0x1286	; 0x1286 <__mulsf3>
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	44 e3       	ldi	r20, 0x34	; 52
     d88:	53 e4       	ldi	r21, 0x43	; 67
     d8a:	0e 94 b2 07 	call	0xf64	; 0xf64 <__divsf3>

				// Calculate analog output value using the equation: Value = 5 + 5 * sin(angle)
				value = 5 + 5 * sin(radianAngle);
     d8e:	0e 94 a6 09 	call	0x134c	; 0x134c <sin>
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 ea       	ldi	r20, 0xA0	; 160
     d98:	50 e4       	ldi	r21, 0x40	; 64
     d9a:	0e 94 43 09 	call	0x1286	; 0x1286 <__mulsf3>
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	40 ea       	ldi	r20, 0xA0	; 160
     da4:	50 e4       	ldi	r21, 0x40	; 64
     da6:	0e 94 4a 07 	call	0xe94	; 0xe94 <__addsf3>

				// Map the analog value to the DAC resolution
				uint8_t dacValue = (uint8_t)(value * 255 / 10.0);
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	4f e7       	ldi	r20, 0x7F	; 127
     db0:	53 e4       	ldi	r21, 0x43	; 67
     db2:	0e 94 43 09 	call	0x1286	; 0x1286 <__mulsf3>
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e2       	ldi	r20, 0x20	; 32
     dbc:	51 e4       	ldi	r21, 0x41	; 65
     dbe:	0e 94 b2 07 	call	0xf64	; 0xf64 <__divsf3>
     dc2:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__fixunssfsi>

				// Output the analog value to DAC
				PORTC = dacValue;
     dc6:	65 bb       	out	0x15, r22	; 21
     dc8:	8d eb       	ldi	r24, 0xBD	; 189
     dca:	9a e0       	ldi	r25, 0x0A	; 10
     dcc:	01 97       	sbiw	r24, 0x01	; 1
     dce:	f1 f7       	brne	.-4      	; 0xdcc <SinWave+0x1ce>
     dd0:	00 c0       	rjmp	.+0      	; 0xdd2 <SinWave+0x1d4>
     dd2:	00 00       	nop
	{
		while(1)
		{
			
			
			for (angle = 0; angle <= 360; angle += 10) {
     dd4:	8e 2d       	mov	r24, r14
     dd6:	9f 2d       	mov	r25, r15
     dd8:	a0 2f       	mov	r26, r16
     dda:	bd 2d       	mov	r27, r13
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e2       	ldi	r20, 0x20	; 32
     de6:	51 e4       	ldi	r21, 0x41	; 65
     de8:	0e 94 4a 07 	call	0xe94	; 0xe94 <__addsf3>
     dec:	e6 2e       	mov	r14, r22
     dee:	f7 2e       	mov	r15, r23
     df0:	08 2f       	mov	r16, r24
     df2:	d9 2e       	mov	r13, r25
     df4:	8e 2d       	mov	r24, r14
     df6:	9f 2d       	mov	r25, r15
     df8:	a0 2f       	mov	r26, r16
     dfa:	bd 2d       	mov	r27, r13
     dfc:	bc 01       	movw	r22, r24
     dfe:	cd 01       	movw	r24, r26
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	44 eb       	ldi	r20, 0xB4	; 180
     e06:	53 e4       	ldi	r21, 0x43	; 67
     e08:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__cmpsf2>
     e0c:	18 16       	cp	r1, r24
     e0e:	0c f0       	brlt	.+2      	; 0xe12 <SinWave+0x214>
     e10:	ac cf       	rjmp	.-168    	; 0xd6a <SinWave+0x16c>
     e12:	e1 2e       	mov	r14, r17
     e14:	f1 2e       	mov	r15, r17
     e16:	01 2f       	mov	r16, r17
     e18:	d1 2e       	mov	r13, r17
     e1a:	ec cf       	rjmp	.-40     	; 0xdf4 <SinWave+0x1f6>

00000e1c <main>:
void SquareWave(void);
void StaircaseWave(void);
void TriangularWave(void);
u8 Convert_To_Number(u8 Copy_u8Letter);

void main(void) {
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	0f 92       	push	r0
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	
	u8 Local_u8ReceivedData = 0;
     e26:	19 82       	std	Y+1, r1	; 0x01
	UART_enuInit();
     e28:	0e 94 34 07 	call	0xe68	; 0xe68 <UART_enuInit>
	LCD_enuInit();
     e2c:	0e 94 ca 02 	call	0x594	; 0x594 <LCD_enuInit>
	DDRC=255;	
     e30:	8f ef       	ldi	r24, 0xFF	; 255
     e32:	84 bb       	out	0x14, r24	; 20
	DDRB=255;
     e34:	87 bb       	out	0x17, r24	; 23
	

	while(1)
	{
		
		UART_enuReceiveData(&Local_u8ReceivedData);
     e36:	ce 01       	movw	r24, r28
     e38:	01 96       	adiw	r24, 0x01	; 1
     e3a:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_enuReceiveData>

		switch(Local_u8ReceivedData)
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	81 37       	cpi	r24, 0x71	; 113
     e42:	61 f0       	breq	.+24     	; 0xe5c <main+0x40>
     e44:	82 37       	cpi	r24, 0x72	; 114
     e46:	18 f4       	brcc	.+6      	; 0xe4e <main+0x32>
     e48:	89 36       	cpi	r24, 0x69	; 105
     e4a:	a9 f7       	brne	.-22     	; 0xe36 <main+0x1a>
     e4c:	05 c0       	rjmp	.+10     	; 0xe58 <main+0x3c>
     e4e:	82 37       	cpi	r24, 0x72	; 114
     e50:	39 f0       	breq	.+14     	; 0xe60 <main+0x44>
     e52:	84 37       	cpi	r24, 0x74	; 116
     e54:	81 f7       	brne	.-32     	; 0xe36 <main+0x1a>
     e56:	06 c0       	rjmp	.+12     	; 0xe64 <main+0x48>
		{
			case 'i':
			SinWave();
     e58:	0e 94 ff 05 	call	0xbfe	; 0xbfe <SinWave>
			break;
			case 'q':
			SquareWave();
     e5c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <SquareWave>
			break;
			case 'r':
			TriangularWave();
     e60:	0e 94 58 04 	call	0x8b0	; 0x8b0 <TriangularWave>
			break;
			case 't':
			StaircaseWave();
     e64:	0e 94 c8 04 	call	0x990	; 0x990 <StaircaseWave>

00000e68 <UART_enuInit>:
	/* Set Character Size = 8-bit */
	SET_BIT(Local_u8UCSRCVal,UCSRC_UCSZ0);
	SET_BIT(Local_u8UCSRCVal,UCSRC_UCSZ1);

	/* Send val to register */
	UCSRC = Local_u8UCSRCVal;
     e68:	86 e8       	ldi	r24, 0x86	; 134
     e6a:	80 bd       	out	0x20, r24	; 32

	/*Baud Rate (bps) = 9600 */
	UBRRL = 6;
     e6c:	86 e0       	ldi	r24, 0x06	; 6
     e6e:	89 b9       	out	0x09, r24	; 9

	/* Enable Receive */
	SET_BIT(UCSRB,UCSRB_RXEN);
     e70:	54 9a       	sbi	0x0a, 4	; 10

	/* Enable Transmitter */
	SET_BIT(UCSRB,UCSRB_TXEN);
     e72:	53 9a       	sbi	0x0a, 3	; 10

	return Local_enuErrorState;
}
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	08 95       	ret

00000e78 <UART_enuReceiveData>:

ES_t UART_enuReceiveData(u8* Copy_u8ReceivedData)
{
	ES_t Local_enuErrorState = ES_OK;

	while( ( (UCSRA >> UCSRA_RXC) & (1) ) == 0  );//wait until receive data
     e78:	5f 9b       	sbis	0x0b, 7	; 11
     e7a:	fe cf       	rjmp	.-4      	; 0xe78 <UART_enuReceiveData>

	*Copy_u8ReceivedData = UDR;
     e7c:	2c b1       	in	r18, 0x0c	; 12
     e7e:	fc 01       	movw	r30, r24
     e80:	20 83       	st	Z, r18

	return Local_enuErrorState;
}
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	08 95       	ret

00000e86 <UART_enuSendData>:

ES_t UART_enuSendData(u8 Copy_u8Data)
{
	ES_t Local_enuErrorState = ES_OK;

	while( ( ( UCSRA >> UCSRA_UDRE) & (1) ) == 0 ); // wait until UDR is empty
     e86:	9b b1       	in	r25, 0x0b	; 11
     e88:	95 ff       	sbrs	r25, 5
     e8a:	fd cf       	rjmp	.-6      	; 0xe86 <UART_enuSendData>

	UDR = Copy_u8Data;
     e8c:	8c b9       	out	0x0c, r24	; 12

	return Local_enuErrorState;
}
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	08 95       	ret

00000e92 <__subsf3>:
     e92:	50 58       	subi	r21, 0x80	; 128

00000e94 <__addsf3>:
     e94:	bb 27       	eor	r27, r27
     e96:	aa 27       	eor	r26, r26
     e98:	0e d0       	rcall	.+28     	; 0xeb6 <__addsf3x>
     e9a:	bb c1       	rjmp	.+886    	; 0x1212 <__fp_round>
     e9c:	ac d1       	rcall	.+856    	; 0x11f6 <__fp_pscA>
     e9e:	30 f0       	brcs	.+12     	; 0xeac <__addsf3+0x18>
     ea0:	b1 d1       	rcall	.+866    	; 0x1204 <__fp_pscB>
     ea2:	20 f0       	brcs	.+8      	; 0xeac <__addsf3+0x18>
     ea4:	31 f4       	brne	.+12     	; 0xeb2 <__addsf3+0x1e>
     ea6:	9f 3f       	cpi	r25, 0xFF	; 255
     ea8:	11 f4       	brne	.+4      	; 0xeae <__addsf3+0x1a>
     eaa:	1e f4       	brtc	.+6      	; 0xeb2 <__addsf3+0x1e>
     eac:	91 c1       	rjmp	.+802    	; 0x11d0 <__fp_nan>
     eae:	0e f4       	brtc	.+2      	; 0xeb2 <__addsf3+0x1e>
     eb0:	e0 95       	com	r30
     eb2:	e7 fb       	bst	r30, 7
     eb4:	87 c1       	rjmp	.+782    	; 0x11c4 <__fp_inf>

00000eb6 <__addsf3x>:
     eb6:	e9 2f       	mov	r30, r25
     eb8:	bd d1       	rcall	.+890    	; 0x1234 <__fp_split3>
     eba:	80 f3       	brcs	.-32     	; 0xe9c <__addsf3+0x8>
     ebc:	ba 17       	cp	r27, r26
     ebe:	62 07       	cpc	r22, r18
     ec0:	73 07       	cpc	r23, r19
     ec2:	84 07       	cpc	r24, r20
     ec4:	95 07       	cpc	r25, r21
     ec6:	18 f0       	brcs	.+6      	; 0xece <__addsf3x+0x18>
     ec8:	71 f4       	brne	.+28     	; 0xee6 <__addsf3x+0x30>
     eca:	9e f5       	brtc	.+102    	; 0xf32 <__addsf3x+0x7c>
     ecc:	d5 c1       	rjmp	.+938    	; 0x1278 <__fp_zero>
     ece:	0e f4       	brtc	.+2      	; 0xed2 <__addsf3x+0x1c>
     ed0:	e0 95       	com	r30
     ed2:	0b 2e       	mov	r0, r27
     ed4:	ba 2f       	mov	r27, r26
     ed6:	a0 2d       	mov	r26, r0
     ed8:	0b 01       	movw	r0, r22
     eda:	b9 01       	movw	r22, r18
     edc:	90 01       	movw	r18, r0
     ede:	0c 01       	movw	r0, r24
     ee0:	ca 01       	movw	r24, r20
     ee2:	a0 01       	movw	r20, r0
     ee4:	11 24       	eor	r1, r1
     ee6:	ff 27       	eor	r31, r31
     ee8:	59 1b       	sub	r21, r25
     eea:	99 f0       	breq	.+38     	; 0xf12 <__addsf3x+0x5c>
     eec:	59 3f       	cpi	r21, 0xF9	; 249
     eee:	50 f4       	brcc	.+20     	; 0xf04 <__addsf3x+0x4e>
     ef0:	50 3e       	cpi	r21, 0xE0	; 224
     ef2:	68 f1       	brcs	.+90     	; 0xf4e <__addsf3x+0x98>
     ef4:	1a 16       	cp	r1, r26
     ef6:	f0 40       	sbci	r31, 0x00	; 0
     ef8:	a2 2f       	mov	r26, r18
     efa:	23 2f       	mov	r18, r19
     efc:	34 2f       	mov	r19, r20
     efe:	44 27       	eor	r20, r20
     f00:	58 5f       	subi	r21, 0xF8	; 248
     f02:	f3 cf       	rjmp	.-26     	; 0xeea <__addsf3x+0x34>
     f04:	46 95       	lsr	r20
     f06:	37 95       	ror	r19
     f08:	27 95       	ror	r18
     f0a:	a7 95       	ror	r26
     f0c:	f0 40       	sbci	r31, 0x00	; 0
     f0e:	53 95       	inc	r21
     f10:	c9 f7       	brne	.-14     	; 0xf04 <__addsf3x+0x4e>
     f12:	7e f4       	brtc	.+30     	; 0xf32 <__addsf3x+0x7c>
     f14:	1f 16       	cp	r1, r31
     f16:	ba 0b       	sbc	r27, r26
     f18:	62 0b       	sbc	r22, r18
     f1a:	73 0b       	sbc	r23, r19
     f1c:	84 0b       	sbc	r24, r20
     f1e:	ba f0       	brmi	.+46     	; 0xf4e <__addsf3x+0x98>
     f20:	91 50       	subi	r25, 0x01	; 1
     f22:	a1 f0       	breq	.+40     	; 0xf4c <__addsf3x+0x96>
     f24:	ff 0f       	add	r31, r31
     f26:	bb 1f       	adc	r27, r27
     f28:	66 1f       	adc	r22, r22
     f2a:	77 1f       	adc	r23, r23
     f2c:	88 1f       	adc	r24, r24
     f2e:	c2 f7       	brpl	.-16     	; 0xf20 <__addsf3x+0x6a>
     f30:	0e c0       	rjmp	.+28     	; 0xf4e <__addsf3x+0x98>
     f32:	ba 0f       	add	r27, r26
     f34:	62 1f       	adc	r22, r18
     f36:	73 1f       	adc	r23, r19
     f38:	84 1f       	adc	r24, r20
     f3a:	48 f4       	brcc	.+18     	; 0xf4e <__addsf3x+0x98>
     f3c:	87 95       	ror	r24
     f3e:	77 95       	ror	r23
     f40:	67 95       	ror	r22
     f42:	b7 95       	ror	r27
     f44:	f7 95       	ror	r31
     f46:	9e 3f       	cpi	r25, 0xFE	; 254
     f48:	08 f0       	brcs	.+2      	; 0xf4c <__addsf3x+0x96>
     f4a:	b3 cf       	rjmp	.-154    	; 0xeb2 <__addsf3+0x1e>
     f4c:	93 95       	inc	r25
     f4e:	88 0f       	add	r24, r24
     f50:	08 f0       	brcs	.+2      	; 0xf54 <__addsf3x+0x9e>
     f52:	99 27       	eor	r25, r25
     f54:	ee 0f       	add	r30, r30
     f56:	97 95       	ror	r25
     f58:	87 95       	ror	r24
     f5a:	08 95       	ret

00000f5c <__cmpsf2>:
     f5c:	0f d1       	rcall	.+542    	; 0x117c <__fp_cmp>
     f5e:	08 f4       	brcc	.+2      	; 0xf62 <__cmpsf2+0x6>
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	08 95       	ret

00000f64 <__divsf3>:
     f64:	0c d0       	rcall	.+24     	; 0xf7e <__divsf3x>
     f66:	55 c1       	rjmp	.+682    	; 0x1212 <__fp_round>
     f68:	4d d1       	rcall	.+666    	; 0x1204 <__fp_pscB>
     f6a:	40 f0       	brcs	.+16     	; 0xf7c <__divsf3+0x18>
     f6c:	44 d1       	rcall	.+648    	; 0x11f6 <__fp_pscA>
     f6e:	30 f0       	brcs	.+12     	; 0xf7c <__divsf3+0x18>
     f70:	21 f4       	brne	.+8      	; 0xf7a <__divsf3+0x16>
     f72:	5f 3f       	cpi	r21, 0xFF	; 255
     f74:	19 f0       	breq	.+6      	; 0xf7c <__divsf3+0x18>
     f76:	26 c1       	rjmp	.+588    	; 0x11c4 <__fp_inf>
     f78:	51 11       	cpse	r21, r1
     f7a:	7f c1       	rjmp	.+766    	; 0x127a <__fp_szero>
     f7c:	29 c1       	rjmp	.+594    	; 0x11d0 <__fp_nan>

00000f7e <__divsf3x>:
     f7e:	5a d1       	rcall	.+692    	; 0x1234 <__fp_split3>
     f80:	98 f3       	brcs	.-26     	; 0xf68 <__divsf3+0x4>

00000f82 <__divsf3_pse>:
     f82:	99 23       	and	r25, r25
     f84:	c9 f3       	breq	.-14     	; 0xf78 <__divsf3+0x14>
     f86:	55 23       	and	r21, r21
     f88:	b1 f3       	breq	.-20     	; 0xf76 <__divsf3+0x12>
     f8a:	95 1b       	sub	r25, r21
     f8c:	55 0b       	sbc	r21, r21
     f8e:	bb 27       	eor	r27, r27
     f90:	aa 27       	eor	r26, r26
     f92:	62 17       	cp	r22, r18
     f94:	73 07       	cpc	r23, r19
     f96:	84 07       	cpc	r24, r20
     f98:	38 f0       	brcs	.+14     	; 0xfa8 <__divsf3_pse+0x26>
     f9a:	9f 5f       	subi	r25, 0xFF	; 255
     f9c:	5f 4f       	sbci	r21, 0xFF	; 255
     f9e:	22 0f       	add	r18, r18
     fa0:	33 1f       	adc	r19, r19
     fa2:	44 1f       	adc	r20, r20
     fa4:	aa 1f       	adc	r26, r26
     fa6:	a9 f3       	breq	.-22     	; 0xf92 <__divsf3_pse+0x10>
     fa8:	33 d0       	rcall	.+102    	; 0x1010 <__divsf3_pse+0x8e>
     faa:	0e 2e       	mov	r0, r30
     fac:	3a f0       	brmi	.+14     	; 0xfbc <__divsf3_pse+0x3a>
     fae:	e0 e8       	ldi	r30, 0x80	; 128
     fb0:	30 d0       	rcall	.+96     	; 0x1012 <__divsf3_pse+0x90>
     fb2:	91 50       	subi	r25, 0x01	; 1
     fb4:	50 40       	sbci	r21, 0x00	; 0
     fb6:	e6 95       	lsr	r30
     fb8:	00 1c       	adc	r0, r0
     fba:	ca f7       	brpl	.-14     	; 0xfae <__divsf3_pse+0x2c>
     fbc:	29 d0       	rcall	.+82     	; 0x1010 <__divsf3_pse+0x8e>
     fbe:	fe 2f       	mov	r31, r30
     fc0:	27 d0       	rcall	.+78     	; 0x1010 <__divsf3_pse+0x8e>
     fc2:	66 0f       	add	r22, r22
     fc4:	77 1f       	adc	r23, r23
     fc6:	88 1f       	adc	r24, r24
     fc8:	bb 1f       	adc	r27, r27
     fca:	26 17       	cp	r18, r22
     fcc:	37 07       	cpc	r19, r23
     fce:	48 07       	cpc	r20, r24
     fd0:	ab 07       	cpc	r26, r27
     fd2:	b0 e8       	ldi	r27, 0x80	; 128
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <__divsf3_pse+0x56>
     fd6:	bb 0b       	sbc	r27, r27
     fd8:	80 2d       	mov	r24, r0
     fda:	bf 01       	movw	r22, r30
     fdc:	ff 27       	eor	r31, r31
     fde:	93 58       	subi	r25, 0x83	; 131
     fe0:	5f 4f       	sbci	r21, 0xFF	; 255
     fe2:	2a f0       	brmi	.+10     	; 0xfee <__divsf3_pse+0x6c>
     fe4:	9e 3f       	cpi	r25, 0xFE	; 254
     fe6:	51 05       	cpc	r21, r1
     fe8:	68 f0       	brcs	.+26     	; 0x1004 <__divsf3_pse+0x82>
     fea:	ec c0       	rjmp	.+472    	; 0x11c4 <__fp_inf>
     fec:	46 c1       	rjmp	.+652    	; 0x127a <__fp_szero>
     fee:	5f 3f       	cpi	r21, 0xFF	; 255
     ff0:	ec f3       	brlt	.-6      	; 0xfec <__divsf3_pse+0x6a>
     ff2:	98 3e       	cpi	r25, 0xE8	; 232
     ff4:	dc f3       	brlt	.-10     	; 0xfec <__divsf3_pse+0x6a>
     ff6:	86 95       	lsr	r24
     ff8:	77 95       	ror	r23
     ffa:	67 95       	ror	r22
     ffc:	b7 95       	ror	r27
     ffe:	f7 95       	ror	r31
    1000:	9f 5f       	subi	r25, 0xFF	; 255
    1002:	c9 f7       	brne	.-14     	; 0xff6 <__divsf3_pse+0x74>
    1004:	88 0f       	add	r24, r24
    1006:	91 1d       	adc	r25, r1
    1008:	96 95       	lsr	r25
    100a:	87 95       	ror	r24
    100c:	97 f9       	bld	r25, 7
    100e:	08 95       	ret
    1010:	e1 e0       	ldi	r30, 0x01	; 1
    1012:	66 0f       	add	r22, r22
    1014:	77 1f       	adc	r23, r23
    1016:	88 1f       	adc	r24, r24
    1018:	bb 1f       	adc	r27, r27
    101a:	62 17       	cp	r22, r18
    101c:	73 07       	cpc	r23, r19
    101e:	84 07       	cpc	r24, r20
    1020:	ba 07       	cpc	r27, r26
    1022:	20 f0       	brcs	.+8      	; 0x102c <__divsf3_pse+0xaa>
    1024:	62 1b       	sub	r22, r18
    1026:	73 0b       	sbc	r23, r19
    1028:	84 0b       	sbc	r24, r20
    102a:	ba 0b       	sbc	r27, r26
    102c:	ee 1f       	adc	r30, r30
    102e:	88 f7       	brcc	.-30     	; 0x1012 <__divsf3_pse+0x90>
    1030:	e0 95       	com	r30
    1032:	08 95       	ret

00001034 <__fixsfdi>:
    1034:	be e3       	ldi	r27, 0x3E	; 62
    1036:	04 d0       	rcall	.+8      	; 0x1040 <__fixunssfdi+0x2>
    1038:	08 f4       	brcc	.+2      	; 0x103c <__fixsfdi+0x8>
    103a:	90 e8       	ldi	r25, 0x80	; 128
    103c:	08 95       	ret

0000103e <__fixunssfdi>:
    103e:	bf e3       	ldi	r27, 0x3F	; 63
    1040:	22 27       	eor	r18, r18
    1042:	33 27       	eor	r19, r19
    1044:	a9 01       	movw	r20, r18
    1046:	fe d0       	rcall	.+508    	; 0x1244 <__fp_splitA>
    1048:	58 f1       	brcs	.+86     	; 0x10a0 <__fixunssfdi+0x62>
    104a:	9f 57       	subi	r25, 0x7F	; 127
    104c:	40 f1       	brcs	.+80     	; 0x109e <__fixunssfdi+0x60>
    104e:	b9 17       	cp	r27, r25
    1050:	38 f1       	brcs	.+78     	; 0x10a0 <__fixunssfdi+0x62>
    1052:	bf e3       	ldi	r27, 0x3F	; 63
    1054:	b9 1b       	sub	r27, r25
    1056:	99 27       	eor	r25, r25
    1058:	b8 50       	subi	r27, 0x08	; 8
    105a:	3a f4       	brpl	.+14     	; 0x106a <__fixunssfdi+0x2c>
    105c:	66 0f       	add	r22, r22
    105e:	77 1f       	adc	r23, r23
    1060:	88 1f       	adc	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	b3 95       	inc	r27
    1066:	d2 f3       	brmi	.-12     	; 0x105c <__fixunssfdi+0x1e>
    1068:	16 c0       	rjmp	.+44     	; 0x1096 <__fixunssfdi+0x58>
    106a:	b8 50       	subi	r27, 0x08	; 8
    106c:	4a f0       	brmi	.+18     	; 0x1080 <__fixunssfdi+0x42>
    106e:	23 2f       	mov	r18, r19
    1070:	34 2f       	mov	r19, r20
    1072:	45 2f       	mov	r20, r21
    1074:	56 2f       	mov	r21, r22
    1076:	67 2f       	mov	r22, r23
    1078:	78 2f       	mov	r23, r24
    107a:	88 27       	eor	r24, r24
    107c:	b8 50       	subi	r27, 0x08	; 8
    107e:	ba f7       	brpl	.-18     	; 0x106e <__fixunssfdi+0x30>
    1080:	b8 5f       	subi	r27, 0xF8	; 248
    1082:	49 f0       	breq	.+18     	; 0x1096 <__fixunssfdi+0x58>
    1084:	86 95       	lsr	r24
    1086:	77 95       	ror	r23
    1088:	67 95       	ror	r22
    108a:	57 95       	ror	r21
    108c:	47 95       	ror	r20
    108e:	37 95       	ror	r19
    1090:	27 95       	ror	r18
    1092:	ba 95       	dec	r27
    1094:	b9 f7       	brne	.-18     	; 0x1084 <__fixunssfdi+0x46>
    1096:	0e f4       	brtc	.+2      	; 0x109a <__fixunssfdi+0x5c>
    1098:	9e d0       	rcall	.+316    	; 0x11d6 <__fp_negdi>
    109a:	88 94       	clc
    109c:	08 95       	ret
    109e:	88 94       	clc
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	cb 01       	movw	r24, r22
    10a6:	08 95       	ret

000010a8 <__fixunssfsi>:
    10a8:	cd d0       	rcall	.+410    	; 0x1244 <__fp_splitA>
    10aa:	88 f0       	brcs	.+34     	; 0x10ce <__fixunssfsi+0x26>
    10ac:	9f 57       	subi	r25, 0x7F	; 127
    10ae:	90 f0       	brcs	.+36     	; 0x10d4 <__fixunssfsi+0x2c>
    10b0:	b9 2f       	mov	r27, r25
    10b2:	99 27       	eor	r25, r25
    10b4:	b7 51       	subi	r27, 0x17	; 23
    10b6:	a0 f0       	brcs	.+40     	; 0x10e0 <__fixunssfsi+0x38>
    10b8:	d1 f0       	breq	.+52     	; 0x10ee <__fixunssfsi+0x46>
    10ba:	66 0f       	add	r22, r22
    10bc:	77 1f       	adc	r23, r23
    10be:	88 1f       	adc	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	1a f0       	brmi	.+6      	; 0x10ca <__fixunssfsi+0x22>
    10c4:	ba 95       	dec	r27
    10c6:	c9 f7       	brne	.-14     	; 0x10ba <__fixunssfsi+0x12>
    10c8:	12 c0       	rjmp	.+36     	; 0x10ee <__fixunssfsi+0x46>
    10ca:	b1 30       	cpi	r27, 0x01	; 1
    10cc:	81 f0       	breq	.+32     	; 0x10ee <__fixunssfsi+0x46>
    10ce:	d4 d0       	rcall	.+424    	; 0x1278 <__fp_zero>
    10d0:	b1 e0       	ldi	r27, 0x01	; 1
    10d2:	08 95       	ret
    10d4:	d1 c0       	rjmp	.+418    	; 0x1278 <__fp_zero>
    10d6:	67 2f       	mov	r22, r23
    10d8:	78 2f       	mov	r23, r24
    10da:	88 27       	eor	r24, r24
    10dc:	b8 5f       	subi	r27, 0xF8	; 248
    10de:	39 f0       	breq	.+14     	; 0x10ee <__fixunssfsi+0x46>
    10e0:	b9 3f       	cpi	r27, 0xF9	; 249
    10e2:	cc f3       	brlt	.-14     	; 0x10d6 <__fixunssfsi+0x2e>
    10e4:	86 95       	lsr	r24
    10e6:	77 95       	ror	r23
    10e8:	67 95       	ror	r22
    10ea:	b3 95       	inc	r27
    10ec:	d9 f7       	brne	.-10     	; 0x10e4 <__fixunssfsi+0x3c>
    10ee:	3e f4       	brtc	.+14     	; 0x10fe <__fixunssfsi+0x56>
    10f0:	90 95       	com	r25
    10f2:	80 95       	com	r24
    10f4:	70 95       	com	r23
    10f6:	61 95       	neg	r22
    10f8:	7f 4f       	sbci	r23, 0xFF	; 255
    10fa:	8f 4f       	sbci	r24, 0xFF	; 255
    10fc:	9f 4f       	sbci	r25, 0xFF	; 255
    10fe:	08 95       	ret

00001100 <__floatundisf>:
    1100:	e8 94       	clt

00001102 <__fp_di2sf>:
    1102:	f9 2f       	mov	r31, r25
    1104:	96 eb       	ldi	r25, 0xB6	; 182
    1106:	ff 23       	and	r31, r31
    1108:	81 f0       	breq	.+32     	; 0x112a <__fp_di2sf+0x28>
    110a:	12 16       	cp	r1, r18
    110c:	13 06       	cpc	r1, r19
    110e:	14 06       	cpc	r1, r20
    1110:	44 0b       	sbc	r20, r20
    1112:	93 95       	inc	r25
    1114:	f6 95       	lsr	r31
    1116:	87 95       	ror	r24
    1118:	77 95       	ror	r23
    111a:	67 95       	ror	r22
    111c:	57 95       	ror	r21
    111e:	40 40       	sbci	r20, 0x00	; 0
    1120:	ff 23       	and	r31, r31
    1122:	b9 f7       	brne	.-18     	; 0x1112 <__fp_di2sf+0x10>
    1124:	1b c0       	rjmp	.+54     	; 0x115c <__fp_di2sf+0x5a>
    1126:	99 27       	eor	r25, r25
    1128:	08 95       	ret
    112a:	88 23       	and	r24, r24
    112c:	51 f4       	brne	.+20     	; 0x1142 <__fp_di2sf+0x40>
    112e:	98 50       	subi	r25, 0x08	; 8
    1130:	d2 f7       	brpl	.-12     	; 0x1126 <__fp_di2sf+0x24>
    1132:	87 2b       	or	r24, r23
    1134:	76 2f       	mov	r23, r22
    1136:	65 2f       	mov	r22, r21
    1138:	54 2f       	mov	r21, r20
    113a:	43 2f       	mov	r20, r19
    113c:	32 2f       	mov	r19, r18
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	b1 f3       	breq	.-20     	; 0x112e <__fp_di2sf+0x2c>
    1142:	12 16       	cp	r1, r18
    1144:	13 06       	cpc	r1, r19
    1146:	14 06       	cpc	r1, r20
    1148:	44 0b       	sbc	r20, r20
    114a:	88 23       	and	r24, r24
    114c:	3a f0       	brmi	.+14     	; 0x115c <__fp_di2sf+0x5a>
    114e:	9a 95       	dec	r25
    1150:	44 0f       	add	r20, r20
    1152:	55 1f       	adc	r21, r21
    1154:	66 1f       	adc	r22, r22
    1156:	77 1f       	adc	r23, r23
    1158:	88 1f       	adc	r24, r24
    115a:	ca f7       	brpl	.-14     	; 0x114e <__fp_di2sf+0x4c>
    115c:	55 23       	and	r21, r21
    115e:	4a f4       	brpl	.+18     	; 0x1172 <__fp_di2sf+0x70>
    1160:	44 0f       	add	r20, r20
    1162:	55 1f       	adc	r21, r21
    1164:	11 f4       	brne	.+4      	; 0x116a <__fp_di2sf+0x68>
    1166:	60 ff       	sbrs	r22, 0
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <__fp_di2sf+0x70>
    116a:	6f 5f       	subi	r22, 0xFF	; 255
    116c:	7f 4f       	sbci	r23, 0xFF	; 255
    116e:	8f 4f       	sbci	r24, 0xFF	; 255
    1170:	9f 4f       	sbci	r25, 0xFF	; 255
    1172:	88 0f       	add	r24, r24
    1174:	96 95       	lsr	r25
    1176:	87 95       	ror	r24
    1178:	97 f9       	bld	r25, 7
    117a:	08 95       	ret

0000117c <__fp_cmp>:
    117c:	99 0f       	add	r25, r25
    117e:	00 08       	sbc	r0, r0
    1180:	55 0f       	add	r21, r21
    1182:	aa 0b       	sbc	r26, r26
    1184:	e0 e8       	ldi	r30, 0x80	; 128
    1186:	fe ef       	ldi	r31, 0xFE	; 254
    1188:	16 16       	cp	r1, r22
    118a:	17 06       	cpc	r1, r23
    118c:	e8 07       	cpc	r30, r24
    118e:	f9 07       	cpc	r31, r25
    1190:	c0 f0       	brcs	.+48     	; 0x11c2 <__fp_cmp+0x46>
    1192:	12 16       	cp	r1, r18
    1194:	13 06       	cpc	r1, r19
    1196:	e4 07       	cpc	r30, r20
    1198:	f5 07       	cpc	r31, r21
    119a:	98 f0       	brcs	.+38     	; 0x11c2 <__fp_cmp+0x46>
    119c:	62 1b       	sub	r22, r18
    119e:	73 0b       	sbc	r23, r19
    11a0:	84 0b       	sbc	r24, r20
    11a2:	95 0b       	sbc	r25, r21
    11a4:	39 f4       	brne	.+14     	; 0x11b4 <__fp_cmp+0x38>
    11a6:	0a 26       	eor	r0, r26
    11a8:	61 f0       	breq	.+24     	; 0x11c2 <__fp_cmp+0x46>
    11aa:	23 2b       	or	r18, r19
    11ac:	24 2b       	or	r18, r20
    11ae:	25 2b       	or	r18, r21
    11b0:	21 f4       	brne	.+8      	; 0x11ba <__fp_cmp+0x3e>
    11b2:	08 95       	ret
    11b4:	0a 26       	eor	r0, r26
    11b6:	09 f4       	brne	.+2      	; 0x11ba <__fp_cmp+0x3e>
    11b8:	a1 40       	sbci	r26, 0x01	; 1
    11ba:	a6 95       	lsr	r26
    11bc:	8f ef       	ldi	r24, 0xFF	; 255
    11be:	81 1d       	adc	r24, r1
    11c0:	81 1d       	adc	r24, r1
    11c2:	08 95       	ret

000011c4 <__fp_inf>:
    11c4:	97 f9       	bld	r25, 7
    11c6:	9f 67       	ori	r25, 0x7F	; 127
    11c8:	80 e8       	ldi	r24, 0x80	; 128
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	08 95       	ret

000011d0 <__fp_nan>:
    11d0:	9f ef       	ldi	r25, 0xFF	; 255
    11d2:	80 ec       	ldi	r24, 0xC0	; 192
    11d4:	08 95       	ret

000011d6 <__fp_negdi>:
    11d6:	90 95       	com	r25
    11d8:	80 95       	com	r24
    11da:	70 95       	com	r23
    11dc:	60 95       	com	r22
    11de:	50 95       	com	r21
    11e0:	40 95       	com	r20
    11e2:	30 95       	com	r19
    11e4:	21 95       	neg	r18
    11e6:	3f 4f       	sbci	r19, 0xFF	; 255
    11e8:	4f 4f       	sbci	r20, 0xFF	; 255
    11ea:	5f 4f       	sbci	r21, 0xFF	; 255
    11ec:	6f 4f       	sbci	r22, 0xFF	; 255
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	8f 4f       	sbci	r24, 0xFF	; 255
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	08 95       	ret

000011f6 <__fp_pscA>:
    11f6:	00 24       	eor	r0, r0
    11f8:	0a 94       	dec	r0
    11fa:	16 16       	cp	r1, r22
    11fc:	17 06       	cpc	r1, r23
    11fe:	18 06       	cpc	r1, r24
    1200:	09 06       	cpc	r0, r25
    1202:	08 95       	ret

00001204 <__fp_pscB>:
    1204:	00 24       	eor	r0, r0
    1206:	0a 94       	dec	r0
    1208:	12 16       	cp	r1, r18
    120a:	13 06       	cpc	r1, r19
    120c:	14 06       	cpc	r1, r20
    120e:	05 06       	cpc	r0, r21
    1210:	08 95       	ret

00001212 <__fp_round>:
    1212:	09 2e       	mov	r0, r25
    1214:	03 94       	inc	r0
    1216:	00 0c       	add	r0, r0
    1218:	11 f4       	brne	.+4      	; 0x121e <__fp_round+0xc>
    121a:	88 23       	and	r24, r24
    121c:	52 f0       	brmi	.+20     	; 0x1232 <__fp_round+0x20>
    121e:	bb 0f       	add	r27, r27
    1220:	40 f4       	brcc	.+16     	; 0x1232 <__fp_round+0x20>
    1222:	bf 2b       	or	r27, r31
    1224:	11 f4       	brne	.+4      	; 0x122a <__fp_round+0x18>
    1226:	60 ff       	sbrs	r22, 0
    1228:	04 c0       	rjmp	.+8      	; 0x1232 <__fp_round+0x20>
    122a:	6f 5f       	subi	r22, 0xFF	; 255
    122c:	7f 4f       	sbci	r23, 0xFF	; 255
    122e:	8f 4f       	sbci	r24, 0xFF	; 255
    1230:	9f 4f       	sbci	r25, 0xFF	; 255
    1232:	08 95       	ret

00001234 <__fp_split3>:
    1234:	57 fd       	sbrc	r21, 7
    1236:	90 58       	subi	r25, 0x80	; 128
    1238:	44 0f       	add	r20, r20
    123a:	55 1f       	adc	r21, r21
    123c:	59 f0       	breq	.+22     	; 0x1254 <__fp_splitA+0x10>
    123e:	5f 3f       	cpi	r21, 0xFF	; 255
    1240:	71 f0       	breq	.+28     	; 0x125e <__fp_splitA+0x1a>
    1242:	47 95       	ror	r20

00001244 <__fp_splitA>:
    1244:	88 0f       	add	r24, r24
    1246:	97 fb       	bst	r25, 7
    1248:	99 1f       	adc	r25, r25
    124a:	61 f0       	breq	.+24     	; 0x1264 <__fp_splitA+0x20>
    124c:	9f 3f       	cpi	r25, 0xFF	; 255
    124e:	79 f0       	breq	.+30     	; 0x126e <__fp_splitA+0x2a>
    1250:	87 95       	ror	r24
    1252:	08 95       	ret
    1254:	12 16       	cp	r1, r18
    1256:	13 06       	cpc	r1, r19
    1258:	14 06       	cpc	r1, r20
    125a:	55 1f       	adc	r21, r21
    125c:	f2 cf       	rjmp	.-28     	; 0x1242 <__fp_split3+0xe>
    125e:	46 95       	lsr	r20
    1260:	f1 df       	rcall	.-30     	; 0x1244 <__fp_splitA>
    1262:	08 c0       	rjmp	.+16     	; 0x1274 <__fp_splitA+0x30>
    1264:	16 16       	cp	r1, r22
    1266:	17 06       	cpc	r1, r23
    1268:	18 06       	cpc	r1, r24
    126a:	99 1f       	adc	r25, r25
    126c:	f1 cf       	rjmp	.-30     	; 0x1250 <__fp_splitA+0xc>
    126e:	86 95       	lsr	r24
    1270:	71 05       	cpc	r23, r1
    1272:	61 05       	cpc	r22, r1
    1274:	08 94       	sec
    1276:	08 95       	ret

00001278 <__fp_zero>:
    1278:	e8 94       	clt

0000127a <__fp_szero>:
    127a:	bb 27       	eor	r27, r27
    127c:	66 27       	eor	r22, r22
    127e:	77 27       	eor	r23, r23
    1280:	cb 01       	movw	r24, r22
    1282:	97 f9       	bld	r25, 7
    1284:	08 95       	ret

00001286 <__mulsf3>:
    1286:	0b d0       	rcall	.+22     	; 0x129e <__mulsf3x>
    1288:	c4 cf       	rjmp	.-120    	; 0x1212 <__fp_round>
    128a:	b5 df       	rcall	.-150    	; 0x11f6 <__fp_pscA>
    128c:	28 f0       	brcs	.+10     	; 0x1298 <__mulsf3+0x12>
    128e:	ba df       	rcall	.-140    	; 0x1204 <__fp_pscB>
    1290:	18 f0       	brcs	.+6      	; 0x1298 <__mulsf3+0x12>
    1292:	95 23       	and	r25, r21
    1294:	09 f0       	breq	.+2      	; 0x1298 <__mulsf3+0x12>
    1296:	96 cf       	rjmp	.-212    	; 0x11c4 <__fp_inf>
    1298:	9b cf       	rjmp	.-202    	; 0x11d0 <__fp_nan>
    129a:	11 24       	eor	r1, r1
    129c:	ee cf       	rjmp	.-36     	; 0x127a <__fp_szero>

0000129e <__mulsf3x>:
    129e:	ca df       	rcall	.-108    	; 0x1234 <__fp_split3>
    12a0:	a0 f3       	brcs	.-24     	; 0x128a <__mulsf3+0x4>

000012a2 <__mulsf3_pse>:
    12a2:	95 9f       	mul	r25, r21
    12a4:	d1 f3       	breq	.-12     	; 0x129a <__mulsf3+0x14>
    12a6:	95 0f       	add	r25, r21
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	55 1f       	adc	r21, r21
    12ac:	62 9f       	mul	r22, r18
    12ae:	f0 01       	movw	r30, r0
    12b0:	72 9f       	mul	r23, r18
    12b2:	bb 27       	eor	r27, r27
    12b4:	f0 0d       	add	r31, r0
    12b6:	b1 1d       	adc	r27, r1
    12b8:	63 9f       	mul	r22, r19
    12ba:	aa 27       	eor	r26, r26
    12bc:	f0 0d       	add	r31, r0
    12be:	b1 1d       	adc	r27, r1
    12c0:	aa 1f       	adc	r26, r26
    12c2:	64 9f       	mul	r22, r20
    12c4:	66 27       	eor	r22, r22
    12c6:	b0 0d       	add	r27, r0
    12c8:	a1 1d       	adc	r26, r1
    12ca:	66 1f       	adc	r22, r22
    12cc:	82 9f       	mul	r24, r18
    12ce:	22 27       	eor	r18, r18
    12d0:	b0 0d       	add	r27, r0
    12d2:	a1 1d       	adc	r26, r1
    12d4:	62 1f       	adc	r22, r18
    12d6:	73 9f       	mul	r23, r19
    12d8:	b0 0d       	add	r27, r0
    12da:	a1 1d       	adc	r26, r1
    12dc:	62 1f       	adc	r22, r18
    12de:	83 9f       	mul	r24, r19
    12e0:	a0 0d       	add	r26, r0
    12e2:	61 1d       	adc	r22, r1
    12e4:	22 1f       	adc	r18, r18
    12e6:	74 9f       	mul	r23, r20
    12e8:	33 27       	eor	r19, r19
    12ea:	a0 0d       	add	r26, r0
    12ec:	61 1d       	adc	r22, r1
    12ee:	23 1f       	adc	r18, r19
    12f0:	84 9f       	mul	r24, r20
    12f2:	60 0d       	add	r22, r0
    12f4:	21 1d       	adc	r18, r1
    12f6:	82 2f       	mov	r24, r18
    12f8:	76 2f       	mov	r23, r22
    12fa:	6a 2f       	mov	r22, r26
    12fc:	11 24       	eor	r1, r1
    12fe:	9f 57       	subi	r25, 0x7F	; 127
    1300:	50 40       	sbci	r21, 0x00	; 0
    1302:	8a f0       	brmi	.+34     	; 0x1326 <__mulsf3_pse+0x84>
    1304:	e1 f0       	breq	.+56     	; 0x133e <__mulsf3_pse+0x9c>
    1306:	88 23       	and	r24, r24
    1308:	4a f0       	brmi	.+18     	; 0x131c <__mulsf3_pse+0x7a>
    130a:	ee 0f       	add	r30, r30
    130c:	ff 1f       	adc	r31, r31
    130e:	bb 1f       	adc	r27, r27
    1310:	66 1f       	adc	r22, r22
    1312:	77 1f       	adc	r23, r23
    1314:	88 1f       	adc	r24, r24
    1316:	91 50       	subi	r25, 0x01	; 1
    1318:	50 40       	sbci	r21, 0x00	; 0
    131a:	a9 f7       	brne	.-22     	; 0x1306 <__mulsf3_pse+0x64>
    131c:	9e 3f       	cpi	r25, 0xFE	; 254
    131e:	51 05       	cpc	r21, r1
    1320:	70 f0       	brcs	.+28     	; 0x133e <__mulsf3_pse+0x9c>
    1322:	50 cf       	rjmp	.-352    	; 0x11c4 <__fp_inf>
    1324:	aa cf       	rjmp	.-172    	; 0x127a <__fp_szero>
    1326:	5f 3f       	cpi	r21, 0xFF	; 255
    1328:	ec f3       	brlt	.-6      	; 0x1324 <__mulsf3_pse+0x82>
    132a:	98 3e       	cpi	r25, 0xE8	; 232
    132c:	dc f3       	brlt	.-10     	; 0x1324 <__mulsf3_pse+0x82>
    132e:	86 95       	lsr	r24
    1330:	77 95       	ror	r23
    1332:	67 95       	ror	r22
    1334:	b7 95       	ror	r27
    1336:	f7 95       	ror	r31
    1338:	e7 95       	ror	r30
    133a:	9f 5f       	subi	r25, 0xFF	; 255
    133c:	c1 f7       	brne	.-16     	; 0x132e <__mulsf3_pse+0x8c>
    133e:	fe 2b       	or	r31, r30
    1340:	88 0f       	add	r24, r24
    1342:	91 1d       	adc	r25, r1
    1344:	96 95       	lsr	r25
    1346:	87 95       	ror	r24
    1348:	97 f9       	bld	r25, 7
    134a:	08 95       	ret

0000134c <sin>:
    134c:	9f 93       	push	r25
    134e:	05 d0       	rcall	.+10     	; 0x135a <__fp_rempio2>
    1350:	0f 90       	pop	r0
    1352:	07 fc       	sbrc	r0, 7
    1354:	ee 5f       	subi	r30, 0xFE	; 254
    1356:	28 c0       	rjmp	.+80     	; 0x13a8 <__fp_sinus>
    1358:	3b cf       	rjmp	.-394    	; 0x11d0 <__fp_nan>

0000135a <__fp_rempio2>:
    135a:	74 df       	rcall	.-280    	; 0x1244 <__fp_splitA>
    135c:	e8 f3       	brcs	.-6      	; 0x1358 <sin+0xc>
    135e:	e8 94       	clt
    1360:	e0 e0       	ldi	r30, 0x00	; 0
    1362:	bb 27       	eor	r27, r27
    1364:	9f 57       	subi	r25, 0x7F	; 127
    1366:	f0 f0       	brcs	.+60     	; 0x13a4 <__fp_rempio2+0x4a>
    1368:	2a ed       	ldi	r18, 0xDA	; 218
    136a:	3f e0       	ldi	r19, 0x0F	; 15
    136c:	49 ec       	ldi	r20, 0xC9	; 201
    136e:	06 c0       	rjmp	.+12     	; 0x137c <__fp_rempio2+0x22>
    1370:	ee 0f       	add	r30, r30
    1372:	bb 0f       	add	r27, r27
    1374:	66 1f       	adc	r22, r22
    1376:	77 1f       	adc	r23, r23
    1378:	88 1f       	adc	r24, r24
    137a:	28 f0       	brcs	.+10     	; 0x1386 <__fp_rempio2+0x2c>
    137c:	b2 3a       	cpi	r27, 0xA2	; 162
    137e:	62 07       	cpc	r22, r18
    1380:	73 07       	cpc	r23, r19
    1382:	84 07       	cpc	r24, r20
    1384:	28 f0       	brcs	.+10     	; 0x1390 <__fp_rempio2+0x36>
    1386:	b2 5a       	subi	r27, 0xA2	; 162
    1388:	62 0b       	sbc	r22, r18
    138a:	73 0b       	sbc	r23, r19
    138c:	84 0b       	sbc	r24, r20
    138e:	e3 95       	inc	r30
    1390:	9a 95       	dec	r25
    1392:	72 f7       	brpl	.-36     	; 0x1370 <__fp_rempio2+0x16>
    1394:	80 38       	cpi	r24, 0x80	; 128
    1396:	30 f4       	brcc	.+12     	; 0x13a4 <__fp_rempio2+0x4a>
    1398:	9a 95       	dec	r25
    139a:	bb 0f       	add	r27, r27
    139c:	66 1f       	adc	r22, r22
    139e:	77 1f       	adc	r23, r23
    13a0:	88 1f       	adc	r24, r24
    13a2:	d2 f7       	brpl	.-12     	; 0x1398 <__fp_rempio2+0x3e>
    13a4:	90 48       	sbci	r25, 0x80	; 128
    13a6:	13 c0       	rjmp	.+38     	; 0x13ce <__fp_mpack_finite>

000013a8 <__fp_sinus>:
    13a8:	ef 93       	push	r30
    13aa:	e0 ff       	sbrs	r30, 0
    13ac:	06 c0       	rjmp	.+12     	; 0x13ba <__fp_sinus+0x12>
    13ae:	a2 ea       	ldi	r26, 0xA2	; 162
    13b0:	2a ed       	ldi	r18, 0xDA	; 218
    13b2:	3f e0       	ldi	r19, 0x0F	; 15
    13b4:	49 ec       	ldi	r20, 0xC9	; 201
    13b6:	5f eb       	ldi	r21, 0xBF	; 191
    13b8:	7e dd       	rcall	.-1284   	; 0xeb6 <__addsf3x>
    13ba:	2b df       	rcall	.-426    	; 0x1212 <__fp_round>
    13bc:	0f 90       	pop	r0
    13be:	03 94       	inc	r0
    13c0:	01 fc       	sbrc	r0, 1
    13c2:	90 58       	subi	r25, 0x80	; 128
    13c4:	e4 e5       	ldi	r30, 0x54	; 84
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	0e c0       	rjmp	.+28     	; 0x13e6 <__fp_powsodd>

000013ca <__fp_mpack>:
    13ca:	9f 3f       	cpi	r25, 0xFF	; 255
    13cc:	31 f0       	breq	.+12     	; 0x13da <__fp_mpack_finite+0xc>

000013ce <__fp_mpack_finite>:
    13ce:	91 50       	subi	r25, 0x01	; 1
    13d0:	20 f4       	brcc	.+8      	; 0x13da <__fp_mpack_finite+0xc>
    13d2:	87 95       	ror	r24
    13d4:	77 95       	ror	r23
    13d6:	67 95       	ror	r22
    13d8:	b7 95       	ror	r27
    13da:	88 0f       	add	r24, r24
    13dc:	91 1d       	adc	r25, r1
    13de:	96 95       	lsr	r25
    13e0:	87 95       	ror	r24
    13e2:	97 f9       	bld	r25, 7
    13e4:	08 95       	ret

000013e6 <__fp_powsodd>:
    13e6:	9f 93       	push	r25
    13e8:	8f 93       	push	r24
    13ea:	7f 93       	push	r23
    13ec:	6f 93       	push	r22
    13ee:	ff 93       	push	r31
    13f0:	ef 93       	push	r30
    13f2:	9b 01       	movw	r18, r22
    13f4:	ac 01       	movw	r20, r24
    13f6:	47 df       	rcall	.-370    	; 0x1286 <__mulsf3>
    13f8:	ef 91       	pop	r30
    13fa:	ff 91       	pop	r31
    13fc:	05 d0       	rcall	.+10     	; 0x1408 <__fp_powser>
    13fe:	2f 91       	pop	r18
    1400:	3f 91       	pop	r19
    1402:	4f 91       	pop	r20
    1404:	5f 91       	pop	r21
    1406:	3f cf       	rjmp	.-386    	; 0x1286 <__mulsf3>

00001408 <__fp_powser>:
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	1f 93       	push	r17
    140e:	0f 93       	push	r16
    1410:	ff 92       	push	r15
    1412:	ef 92       	push	r14
    1414:	df 92       	push	r13
    1416:	7b 01       	movw	r14, r22
    1418:	8c 01       	movw	r16, r24
    141a:	68 94       	set
    141c:	05 c0       	rjmp	.+10     	; 0x1428 <__fp_powser+0x20>
    141e:	da 2e       	mov	r13, r26
    1420:	ef 01       	movw	r28, r30
    1422:	3d df       	rcall	.-390    	; 0x129e <__mulsf3x>
    1424:	fe 01       	movw	r30, r28
    1426:	e8 94       	clt
    1428:	a5 91       	lpm	r26, Z+
    142a:	25 91       	lpm	r18, Z+
    142c:	35 91       	lpm	r19, Z+
    142e:	45 91       	lpm	r20, Z+
    1430:	55 91       	lpm	r21, Z+
    1432:	ae f3       	brts	.-22     	; 0x141e <__fp_powser+0x16>
    1434:	ef 01       	movw	r28, r30
    1436:	3f dd       	rcall	.-1410   	; 0xeb6 <__addsf3x>
    1438:	fe 01       	movw	r30, r28
    143a:	97 01       	movw	r18, r14
    143c:	a8 01       	movw	r20, r16
    143e:	da 94       	dec	r13
    1440:	79 f7       	brne	.-34     	; 0x1420 <__fp_powser+0x18>
    1442:	df 90       	pop	r13
    1444:	ef 90       	pop	r14
    1446:	ff 90       	pop	r15
    1448:	0f 91       	pop	r16
    144a:	1f 91       	pop	r17
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <__mulsi3>:
    1452:	62 9f       	mul	r22, r18
    1454:	d0 01       	movw	r26, r0
    1456:	73 9f       	mul	r23, r19
    1458:	f0 01       	movw	r30, r0
    145a:	82 9f       	mul	r24, r18
    145c:	e0 0d       	add	r30, r0
    145e:	f1 1d       	adc	r31, r1
    1460:	64 9f       	mul	r22, r20
    1462:	e0 0d       	add	r30, r0
    1464:	f1 1d       	adc	r31, r1
    1466:	92 9f       	mul	r25, r18
    1468:	f0 0d       	add	r31, r0
    146a:	83 9f       	mul	r24, r19
    146c:	f0 0d       	add	r31, r0
    146e:	74 9f       	mul	r23, r20
    1470:	f0 0d       	add	r31, r0
    1472:	65 9f       	mul	r22, r21
    1474:	f0 0d       	add	r31, r0
    1476:	99 27       	eor	r25, r25
    1478:	72 9f       	mul	r23, r18
    147a:	b0 0d       	add	r27, r0
    147c:	e1 1d       	adc	r30, r1
    147e:	f9 1f       	adc	r31, r25
    1480:	63 9f       	mul	r22, r19
    1482:	b0 0d       	add	r27, r0
    1484:	e1 1d       	adc	r30, r1
    1486:	f9 1f       	adc	r31, r25
    1488:	bd 01       	movw	r22, r26
    148a:	cf 01       	movw	r24, r30
    148c:	11 24       	eor	r1, r1
    148e:	08 95       	ret

00001490 <__udivmodsi4>:
    1490:	a1 e2       	ldi	r26, 0x21	; 33
    1492:	1a 2e       	mov	r1, r26
    1494:	aa 1b       	sub	r26, r26
    1496:	bb 1b       	sub	r27, r27
    1498:	fd 01       	movw	r30, r26
    149a:	0d c0       	rjmp	.+26     	; 0x14b6 <__udivmodsi4_ep>

0000149c <__udivmodsi4_loop>:
    149c:	aa 1f       	adc	r26, r26
    149e:	bb 1f       	adc	r27, r27
    14a0:	ee 1f       	adc	r30, r30
    14a2:	ff 1f       	adc	r31, r31
    14a4:	a2 17       	cp	r26, r18
    14a6:	b3 07       	cpc	r27, r19
    14a8:	e4 07       	cpc	r30, r20
    14aa:	f5 07       	cpc	r31, r21
    14ac:	20 f0       	brcs	.+8      	; 0x14b6 <__udivmodsi4_ep>
    14ae:	a2 1b       	sub	r26, r18
    14b0:	b3 0b       	sbc	r27, r19
    14b2:	e4 0b       	sbc	r30, r20
    14b4:	f5 0b       	sbc	r31, r21

000014b6 <__udivmodsi4_ep>:
    14b6:	66 1f       	adc	r22, r22
    14b8:	77 1f       	adc	r23, r23
    14ba:	88 1f       	adc	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	1a 94       	dec	r1
    14c0:	69 f7       	brne	.-38     	; 0x149c <__udivmodsi4_loop>
    14c2:	60 95       	com	r22
    14c4:	70 95       	com	r23
    14c6:	80 95       	com	r24
    14c8:	90 95       	com	r25
    14ca:	9b 01       	movw	r18, r22
    14cc:	ac 01       	movw	r20, r24
    14ce:	bd 01       	movw	r22, r26
    14d0:	cf 01       	movw	r24, r30
    14d2:	08 95       	ret

000014d4 <__divmodsi4>:
    14d4:	97 fb       	bst	r25, 7
    14d6:	09 2e       	mov	r0, r25
    14d8:	05 26       	eor	r0, r21
    14da:	0e d0       	rcall	.+28     	; 0x14f8 <__divmodsi4_neg1>
    14dc:	57 fd       	sbrc	r21, 7
    14de:	04 d0       	rcall	.+8      	; 0x14e8 <__divmodsi4_neg2>
    14e0:	d7 df       	rcall	.-82     	; 0x1490 <__udivmodsi4>
    14e2:	0a d0       	rcall	.+20     	; 0x14f8 <__divmodsi4_neg1>
    14e4:	00 1c       	adc	r0, r0
    14e6:	38 f4       	brcc	.+14     	; 0x14f6 <__divmodsi4_exit>

000014e8 <__divmodsi4_neg2>:
    14e8:	50 95       	com	r21
    14ea:	40 95       	com	r20
    14ec:	30 95       	com	r19
    14ee:	21 95       	neg	r18
    14f0:	3f 4f       	sbci	r19, 0xFF	; 255
    14f2:	4f 4f       	sbci	r20, 0xFF	; 255
    14f4:	5f 4f       	sbci	r21, 0xFF	; 255

000014f6 <__divmodsi4_exit>:
    14f6:	08 95       	ret

000014f8 <__divmodsi4_neg1>:
    14f8:	f6 f7       	brtc	.-4      	; 0x14f6 <__divmodsi4_exit>
    14fa:	90 95       	com	r25
    14fc:	80 95       	com	r24
    14fe:	70 95       	com	r23
    1500:	61 95       	neg	r22
    1502:	7f 4f       	sbci	r23, 0xFF	; 255
    1504:	8f 4f       	sbci	r24, 0xFF	; 255
    1506:	9f 4f       	sbci	r25, 0xFF	; 255
    1508:	08 95       	ret

0000150a <_exit>:
    150a:	f8 94       	cli

0000150c <__stop_program>:
    150c:	ff cf       	rjmp	.-2      	; 0x150c <__stop_program>
